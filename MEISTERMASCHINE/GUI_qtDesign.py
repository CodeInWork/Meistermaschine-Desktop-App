# Form implementation generated from reading ui file 'GUI_qtDesign.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets, QtMultimedia
from PySide6.QtCore import Slot
import time as t
import glob as gl

import os
import sys

# ToDo: 
#   - make *.mms only hold the song title and make it recombine with application path on demand
#   - when currentplaylist widget is rearranged, update button playlist
#   - add inactive play icon when playstate is stopped (play button is inactive)
#   - erase unnecessary public declarators (self.*) for garbage collection
#   - shift stylesheets into own source file
#   - make window resizable (or disable resize) 
#   - make program react to audio output changes


# app colors
green = "rgb(97, 195, 144)"
pale_green = "rgb(153, 255, 202)"
pale_blue = "rgb(53, 238, 255)"
blue = "rgb(3, 175, 255)"
yellow = "rgb(255, 205, 88)"
pale_pink = "rgb(255, 152, 231)"

black = "rgb(0,0,0)"
dark_gray = "rgb(80, 80, 80)"
gray = "rgb(149, 149, 149)"
white = "rgb(255,255,255)"


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        ########################################################################################################
        # variables and settings
        self.btn_rows = 5
        self.musicIcon_lst = ["smiley_star","smiley_grin","smiley_neutral","smiley_scary","smiley_death"]
        self.musicBtn_color = pale_green
        self.settingIcon_lst = ["pub","dorf","landschaft","hohle","kampf"]
        self.settingBtn_color = yellow
        self.weatherIcon_lst = ["nacht","welle","wind","sturm","schnee"]
        self.weatherBtn_color = pale_blue
        self.specialIcon_lst = ["icon_square","icon_plus","icon_triangle","icon_minus","icon_star"]
        self.specialBtn_color = [pale_pink, pale_blue, yellow, pale_green, pale_pink]
        
        # get sys path depending on build condition (as *.exe or as script)
        if getattr(sys, 'frozen', False):
            # If the application is run as a bundle, the PyInstaller bootloader
            # extends the sys module by a flag frozen=True and sets the app 
            # path into variable _MEIPASS'.
            application_path = sys._MEIPASS
        else:
            application_path = os.path.dirname(__file__)


        self.default_soundFile_path = os.path.join(application_path, "sounds")
        #f"{os.getcwd()}\\sounds"
        self.default_preset_path = os.path.join(application_path, "presets")
        default_icon_path = os.path.join(application_path, "icons")
        #f"{os.getcwd()}\\presets"

        self.preset_lst=[]

        # Create Player Objects for Button Columns
        # music player
        self._music_output = QtMultimedia.QAudioOutput()
        self._music_output.setVolume(1.0) # initial volume is max
        self.musicPlayer = QtMultimedia.QMediaPlayer()
        self.musicPlayer.setAudioOutput(self._music_output)

        # setting player
        self._setting_output = QtMultimedia.QAudioOutput()
        self._setting_output.setVolume(1.0) # initial volume is max
        self.settingPlayer = QtMultimedia.QMediaPlayer()
        self.settingPlayer.setAudioOutput(self._setting_output)

        # weather player
        self._weather_output = QtMultimedia.QAudioOutput()
        self._weather_output.setVolume(1.0) # initial volume is max
        self.weatherPlayer = QtMultimedia.QMediaPlayer()
        self.weatherPlayer.setAudioOutput(self._weather_output)

        # special player
        self._special_output = QtMultimedia.QAudioOutput()
        self._special_output.setVolume(1.0) # initial volume is max
        self.specialPlayer = QtMultimedia.QMediaPlayer()
        self.specialPlayer.setAudioOutput(self._special_output)

        # Player signals
        # music player enables position change and is displayed on interface (playlist and position)
        # setting and weather are repeated upon end of media is reached
        # special is only played once
        self.musicPlayer.mediaStatusChanged.connect(self.on_musicPlayerStatusChanged)
        self.musicPlayer.positionChanged.connect(self.on_musicPlayerPositionChanged)
        self.musicPlayer.durationChanged.connect(self.on_musicPlayerDurationChanged)
        self.musicPlayer.playbackStateChanged.connect(self.on_musicPlaybackStateChanged)
        self.settingPlayer.mediaStatusChanged.connect(self.on_settingPlayerStatusChanged)
        self.weatherPlayer.mediaStatusChanged.connect(self.on_weatherPlayerStatusChanged)
        self.specialPlayer.mediaStatusChanged.connect(self.on_specialPlayerStatusChanged)
        

        # slider style sheet
        CSS_Slider = f"""QSlider::handle:horizontal {{
            background: {blue};
            border: 1px solid #565a5e;
            width: 24px;
            height: 8px;
            border-radius: 4px;
        }}"""

        # List View Style sheet
        CSS_List = f"""QListWidget::item{{
            color: {white};
            background-color: transparent;
        }}
        QListWidget {{
            background-color: {dark_gray};
        }}
        QListWidget::item:selected {{
            background-color: {blue};
        }}
        """

        # List View Style sheet
        CSS_ListView = f"""QTreeView::item{{
            color: {white};
            background-color: transparent;
        }}
        QTreeView {{
            background-color: {dark_gray};
            show-decoration-selected: 1;
        }}
        QTreeView::QScrollBar:horizontal {{
            border: 2px solid {gray};
            background: {dark_gray};
        }}
        """

        # ComboBox Style sheet
        CSS_ComboBox = f"""QComboBox {{
            background-color: {dark_gray};
            color: {white};
        }}
        QListView::item {{
            color: {white};
            background-color: transparent;
        }}
        QComboBox QAbstractItemView {{
            background-color: {dark_gray};
            color = {white}
        }}
        """

        # Push Button Style Sheets
        # music button
        CSS_PB_music = f"""QPushButton {{
            background-color: {self.musicBtn_color};
        }}
        QPushButton:checked{{
                    background-color: {dark_gray};
                    border: none; 
                }}
        """

        CSS_PB_setting = f"""QPushButton {{
            background-color: {self.settingBtn_color};
        }}
        QPushButton:checked{{
                    background-color: {dark_gray};
                    border: none; 
                }}
        """

        CSS_PB_weather = f"""QPushButton {{
            background-color: {self.weatherBtn_color};
        }}
        QPushButton:checked{{
                    background-color: {dark_gray};
                    border: none; 
                }}
        """

        CSS_PB_special_0 = f"""QPushButton {{
            background-color: {self.specialBtn_color[0]};
        }}
        QPushButton:checked{{
                    background-color: {dark_gray};
                    border: none; 
                }}
        """
        CSS_PB_special_1 = f"""QPushButton {{
            background-color: {self.specialBtn_color[1]};
        }}
        QPushButton:checked{{
                    background-color: {dark_gray};
                    border: none; 
                }}
        """
        CSS_PB_special_2 = f"""QPushButton {{
            background-color: {self.specialBtn_color[2]};
        }}
        QPushButton:checked{{
                    background-color: {dark_gray};
                    border: none; 
                }}
        """
        CSS_PB_special_3 = f"""QPushButton {{
            background-color: {self.specialBtn_color[3]};
        }}
        QPushButton:checked{{
                    background-color: {dark_gray};
                    border: none; 
                }}
        """
        CSS_PB_special_4 = f"""QPushButton {{
            background-color: {self.specialBtn_color[4]};
        }}
        QPushButton:checked{{
                    background-color: {dark_gray};
                    border: none; 
                }}
        """
        CSS_PB_special_lst=[CSS_PB_special_0,CSS_PB_special_1,CSS_PB_special_2,CSS_PB_special_3,CSS_PB_special_4]

        # sound slider
        CSS_soundSlider = f"""QSlider::groove:horizontal {{
                background: {white};
                height: 40px;
            }}

            QSlider::sub-page:horizontal {{
                background: qlineargradient(x1: 0, y1: 0,    x2: 0, y2: 1,
                    stop: 0 #66e, stop: 1 #bbf);
                background: qlineargradient(x1: 0, y1: 0.2, x2: 1, y2: 1,
                    stop: 0 #bbf, stop: 1 #55f);
                height: 40px;
            }}

            QSlider::add-page:horizontal {{
                background: #fff;
                height: 40px;
            }}

            QSlider::handle:horizontal {{
                background: {dark_gray};
                border: 1px;
                width: 16px;
                margin-top: 0px;
                margin-bottom: 0px;
                border-radius: 0px;
            }}
        """

        # menu bar style sheet
        CSS_menubar = f"""QMenuBar::item{{
                color: {white};
                background-color: transparent;
            }}
            QMenuBar {{
                background: {dark_gray};
            }}
        """
        # tool bar style sheet
        CSS_toolbar = f"""QToolBar{{
                color: {white};
                border: 0px;
                background-color: {dark_gray};
            }}"""


        # main window 
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1100, 600)
        MainWindow.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        
        
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        
        self.centralwidget.setObjectName("centralwidget")

        ########################################################################################################
        # Sound Control Frame

        self.Sound_frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.Sound_frame.setGeometry(QtCore.QRect(0, 449, 800, 151))
        self.Sound_frame.setStyleSheet(f"background-color: {black}")
        self.Sound_frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.Sound_frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.Sound_frame.setObjectName("Sound_frame")
        
        self.playPauseButton = QtWidgets.QPushButton(parent=self.Sound_frame)
        self.playPauseButton.setGeometry(QtCore.QRect(30, 30, 60, 50))
        self.playPauseButton.setStyleSheet(f"background-color:{green}")
        self.playPauseButton.setText("")
        self.playIcon = QtGui.QIcon()
        self.pauseIcon = QtGui.QIcon()
        self.playIcon.addPixmap(QtGui.QPixmap(f"{default_icon_path}/icon_play.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pauseIcon.addPixmap(QtGui.QPixmap(f"{default_icon_path}/icon_pause.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.playPauseButton.setIcon(self.playIcon)
        self.playPauseButton.setIconSize(QtCore.QSize(50, 50))
        self.playPauseButton.setObjectName("playPauseButton")
        self.playPauseButton.clicked.connect(lambda: self.on_playPauseBtnClicked())

        self.trackBackwardButton = QtWidgets.QPushButton(parent=self.Sound_frame)
        self.trackBackwardButton.setGeometry(QtCore.QRect(120, 30, 60, 50))
        self.trackBackwardButton.setStyleSheet(f"background-color:{green}")
        self.trackBackwardButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(f"{default_icon_path}/icon_minus.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.trackBackwardButton.setIcon(icon)
        self.trackBackwardButton.setIconSize(QtCore.QSize(50, 50))
        self.trackBackwardButton.setObjectName("backwardButton")
        self.trackBackwardButton.clicked.connect(lambda: self.on_trackBackwardClicked())

        self.trackForwardButton = QtWidgets.QPushButton(parent=self.Sound_frame)
        self.trackForwardButton.setGeometry(QtCore.QRect(210, 30, 60, 50))
        self.trackForwardButton.setStyleSheet(f"background-color:{green}")
        self.trackForwardButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(f"{default_icon_path}/icon_minus.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.trackForwardButton.setIcon(icon)
        self.trackForwardButton.setIconSize(QtCore.QSize(50, 50))
        self.trackForwardButton.setObjectName("forwardButton")
        self.trackForwardButton.clicked.connect(lambda: self.on_trackForwardClicked())
        
        self.stopButton = QtWidgets.QPushButton(parent=self.Sound_frame)
        self.stopButton.setGeometry(QtCore.QRect(300, 30, 60, 50))
        self.stopButton.setStyleSheet(f"background-color:{green}")
        self.stopButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(f"{default_icon_path}/icon_stop.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.stopButton.setIcon(icon)
        self.stopButton.setIconSize(QtCore.QSize(50, 50))
        self.stopButton.setObjectName("stopButton")
        self.stopButton.clicked.connect(lambda: self.on_stopBtnClicked())

        self.masterVolumeSlider = QtWidgets.QSlider(parent=self.Sound_frame)
        self.masterVolumeSlider.setGeometry(QtCore.QRect(390, 60, 160, 18))
        self.masterVolumeSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.masterVolumeSlider.setStyleSheet(CSS_Slider)
        self.masterVolumeSlider.setObjectName("masterVolumeSlider")
        self.masterVolumeSlider.setRange(0, 100)
        self.masterVolumeSlider.setValue(100*int(self._music_output.volume()))
        self.masterVolumeSlider.valueChanged[int].connect(self.on_masterVolumeSliderChanged)

        self.masterVolumeLabel = QtWidgets.QLabel(parent=self.Sound_frame)
        self.masterVolumeLabel.setGeometry(QtCore.QRect(420, 80, 91, 16))
        self.masterVolumeLabel.setStyleSheet(f"color: {white}")
        self.masterVolumeLabel.setTextFormat(QtCore.Qt.TextFormat.PlainText)
        self.masterVolumeLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.masterVolumeLabel.setObjectName("masterVolumeLabel")

        # List widget displaying the currently active playlist (music button)
        self.currentSoundFilesListWidget = self.RearrangeListWidget(parent=self.Sound_frame)
        #self.currentSoundFilesListWidget = QtWidgets.QListWidget(parent=self.Sound_frame)
        self.currentSoundFilesListWidget.setGeometry(QtCore.QRect(590, 20, 191, 71))
        #self.currentSoundFilesListWidget.setDragEnabled(True)
        #self.currentSoundFilesListWidget.viewport().setAcceptDrops(True)
        #self.currentSoundFilesListWidget.setDragDropMode(QtWidgets.QAbstractItemView.DragDropMode.InternalMove)
        self.currentSoundFilesListWidget.setStyleSheet(CSS_List)
        self.currentSoundFilesListWidget.setObjectName("currentSoundFilesListWidget")
        self.currentSoundFilesListWidget.doubleClicked.connect(self.on_currentSoundFilesListWidget_doubleClicked)
        self.currentSoundFilesListWidget.clicked.connect(self.on_currentSoundFilesListWidget_clicked) 
        self.currentSoundFilesListWidget.itemMoved.connect(self.currentSoundFilesListWidget_itemMoved)

        self.soundSlider = QtWidgets.QSlider(parent=self.Sound_frame)
        self.soundSlider.setGeometry(QtCore.QRect(390, 27, 160, 16))
        self.soundSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.soundSlider.setStyleSheet(CSS_soundSlider)
        self.soundSlider.setValue(0)
        self.soundSlider.setObjectName("soundSlider")
        self.soundSlider.setTracking(False)
        self.soundSlider.sliderPressed.connect(self.on_soundSliderPressed)
        self.soundSlider.sliderReleased.connect(self.on_soundSliderReleased)
       
        ########################################################################################################
        # SD card frame

        self.SDframe = QtWidgets.QFrame(parent=self.centralwidget)
        self.SDframe.setGeometry(QtCore.QRect(800, 0, 300, 600))
        self.SDframe.setStyleSheet(f"background-color:{black}")
        self.SDframe.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.SDframe.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.SDframe.setObjectName("SDframe")


        self.fileModel = QtGui.QFileSystemModel()
        self.fileModel.setRootPath(self.default_soundFile_path)
        self.fileModel.setNameFilters(["*.mp3","*.wav", "*.ogg"]) 
        self.fileModel.setNameFilterDisables(False)
        self.fileTreeListView = QtWidgets.QTreeView(parent=self.SDframe)
        self.fileTreeListView.setSelectionMode(self.fileTreeListView.selectionMode().ExtendedSelection)
        self.fileTreeListView.setHeaderHidden(True)
        self.fileTreeListView.setDragEnabled(True)
        self.fileTreeListView.setGeometry(QtCore.QRect(10, 50, 280, 361))
        self.fileTreeListView.setStyleSheet(CSS_ListView)
        self.fileTreeListView.setObjectName("fileTreeListView")
        self.fileTreeListView.setModel(self.fileModel)
        self.fileTreeListView.setRootIndex(self.fileModel.index(self.default_soundFile_path))
        self.fileTreeListView.setColumnHidden(1, True)  # hide file size
        self.fileTreeListView.setColumnHidden(2, True)  # hide file type
        self.fileTreeListView.setColumnHidden(3, True)  # hide file date
        self.fileTreeListView.setColumnWidth(0, 400)
        self.fileTreeListView.show()
        self.fileTreeListView.doubleClicked[QtCore.QModelIndex].connect(self.on_fileTree_doubleClicked)

        self.getRootFolderButton = QtWidgets.QPushButton(parent=self.SDframe)
        self.getRootFolderButton.setGeometry(QtCore.QRect(10, 10, 111, 24))
        self.getRootFolderButton.setStyleSheet(f"background-color:{green}")
        self.getRootFolderButton.setObjectName("getRootFolderButton")
        self.getRootFolderButton.clicked.connect(lambda: self.on_rootFolderDialogBtnClicked())

        self.saveToSDButton = QtWidgets.QPushButton(parent=self.SDframe)
        self.saveToSDButton.setGeometry(QtCore.QRect(210, 500, 81, 24))
        self.saveToSDButton.setStyleSheet(f"background-color: {blue}")
        self.saveToSDButton.setObjectName("saveToSDButton")

        self.listOfFoundSDCardsCombobox = QtWidgets.QComboBox(parent=self.SDframe)
        self.listOfFoundSDCardsCombobox.setGeometry(QtCore.QRect(10, 470, 280, 22))
        self.listOfFoundSDCardsCombobox.setStyleSheet(f"background-color: {dark_gray}")
        self.listOfFoundSDCardsCombobox.setObjectName("listOfFoundSDCardsCombobox")

        self.SDcardsLabel = QtWidgets.QLabel(parent=self.SDframe)
        self.SDcardsLabel.setGeometry(QtCore.QRect(10, 450, 49, 16))
        self.SDcardsLabel.setStyleSheet(f"color: {white}")
        self.SDcardsLabel.setTextFormat(QtCore.Qt.TextFormat.PlainText)
        self.SDcardsLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.SDcardsLabel.setObjectName("SDcardsLabel")

        self.refreshButton = QtWidgets.QPushButton(parent=self.SDframe)
        self.refreshButton.setGeometry(QtCore.QRect(10, 500, 51, 24))
        self.refreshButton.setStyleSheet(f"background-color: {green}")
        self.refreshButton.setObjectName("refreshButton")

        #########################################################################################################
        # main interface frame (Audio Buttons)
        
        self.interfaceFrame = QtWidgets.QFrame(parent=self.centralwidget)
        self.interfaceFrame.setGeometry(QtCore.QRect(0, 0, 800, 450))
        self.interfaceFrame.setStyleSheet(f"background-color: {gray}")
        self.interfaceFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.interfaceFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.interfaceFrame.setObjectName("interfaceFrame")
        # grid for main sound Buttons
        self.layoutWidget = QtWidgets.QWidget(parent=self.interfaceFrame)
        self.layoutWidget.setGeometry(QtCore.QRect(0, 22, 800, 375))
        self.layoutWidget.setObjectName("layoutWidget")

        self.mainButtonGridLayout = QtWidgets.QGridLayout(self.layoutWidget)
        self.mainButtonGridLayout.setContentsMargins(0, 0, 0, 0)
        self.mainButtonGridLayout.setObjectName("mainButtonGridLayout")

        # Button configurations 
        font = QtGui.QFont()
        font.setPointSize(16)     
          
        # music Buttons
        self.musicBtn_lst = [self.create_acceptDropButton(parent=self.layoutWidget) for b in range(self.btn_rows)]
        for btn in self.musicBtn_lst:
            curBtnIndex = self.musicBtn_lst.index(btn)
            btn.setCheckable(True)
            btn.setMaximumSize(QtCore.QSize(75, 75))
            btn.setFont(font)
            btn.setStyleSheet(CSS_PB_music)
            btn.setText("")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap(f"{default_icon_path}/{self.musicIcon_lst[curBtnIndex]}.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            btn.setIcon(icon)
            btn.setIconSize(QtCore.QSize(50, 50))
            btn.setObjectName(f"musicBtn_{curBtnIndex+1}")
            btn.toggled.connect(lambda checked, idx = curBtnIndex: self.on_soundBtnclicked(idx, 'music'))
            self.mainButtonGridLayout.addWidget(btn, curBtnIndex, 0, 1, 1)

        # setting Buttons
        self.settingBtn_lst = [self.create_acceptDropButton(parent=self.layoutWidget, playlistMaxlength=1) for b in range(self.btn_rows)]
        for btn in self.settingBtn_lst:
            curBtnIndex = self.settingBtn_lst.index(btn)
            btn.setCheckable(True)
            btn.setMaximumSize(QtCore.QSize(75, 75))
            btn.setFont(font)
            btn.setStyleSheet(CSS_PB_setting)
            btn.setText("")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap(f"{default_icon_path}/{self.settingIcon_lst[curBtnIndex]}.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            btn.setIcon(icon)
            btn.setIconSize(QtCore.QSize(50, 50))
            btn.setObjectName(f"settingBtn_{curBtnIndex+1}")
            btn.toggled.connect(lambda checked, idx = curBtnIndex: self.on_soundBtnclicked(idx, 'setting'))
            self.mainButtonGridLayout.addWidget(btn, curBtnIndex, 1, 1, 1)

        # weather Buttons
        self.weatherBtn_lst = [self.create_acceptDropButton(parent=self.layoutWidget, playlistMaxlength=1) for b in range(self.btn_rows)]
        for btn in self.weatherBtn_lst:
            curBtnIndex = self.weatherBtn_lst.index(btn)
            btn.setCheckable(True)
            btn.setMaximumSize(QtCore.QSize(75, 75))
            btn.setFont(font)
            btn.setStyleSheet(CSS_PB_weather)
            btn.setText("")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap(f"{default_icon_path}/{self.weatherIcon_lst[curBtnIndex]}.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            btn.setIcon(icon)
            btn.setIconSize(QtCore.QSize(50, 50))
            btn.setObjectName(f"weatherBtn_{curBtnIndex+1}")
            btn.toggled.connect(lambda checked, idx = curBtnIndex: self.on_soundBtnclicked(idx, 'weather'))
            self.mainButtonGridLayout.addWidget(btn, curBtnIndex, 2, 1, 1)

        # special Buttons
        self.specialBtn_lst = [self.create_acceptDropButton(parent=self.layoutWidget, playlistMaxlength=1) for b in range(self.btn_rows)]
        for btn in self.specialBtn_lst:
            curBtnIndex = self.specialBtn_lst.index(btn)
            btn.setCheckable(True)
            btn.setMaximumSize(QtCore.QSize(75, 75))
            btn.setFont(font)
            btn.setStyleSheet(CSS_PB_special_lst[curBtnIndex])
            btn.setText("")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap(f"{default_icon_path}/{self.specialIcon_lst[curBtnIndex]}.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            btn.setIcon(icon)
            btn.setIconSize(QtCore.QSize(50, 50))
            btn.setObjectName(f"specialBtn_{curBtnIndex+1}")
            btn.toggled.connect(lambda checked, idx = curBtnIndex: self.on_soundBtnclicked(idx, 'special'))
            self.mainButtonGridLayout.addWidget(btn, curBtnIndex, 3, 1, 1)    

        # individual volume sliders
        y_positon_volumeSliders = 415
        self.musicVolumeSlider = QtWidgets.QSlider(parent=self.interfaceFrame)
        self.musicVolumeSlider.setGeometry(QtCore.QRect(79, y_positon_volumeSliders, 111, 20))
        self.musicVolumeSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.musicVolumeSlider.setStyleSheet(CSS_Slider)
        self.musicVolumeSlider.setObjectName("musicVolumeSlider")
        self.musicVolumeSlider.setValue(self.musicVolumeSlider.maximum())   #initial setting = max
        self.musicVolumeSlider.valueChanged.connect(self.on_musicVolumeSliderChanged)

        self.settingVolumeSlider = QtWidgets.QSlider(parent=self.interfaceFrame)
        self.settingVolumeSlider.setGeometry(QtCore.QRect(260, y_positon_volumeSliders, 111, 20))
        self.settingVolumeSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.settingVolumeSlider.setStyleSheet(CSS_Slider)
        self.settingVolumeSlider.setObjectName("settingVolumeSlider")
        self.settingVolumeSlider.setValue(self.settingVolumeSlider.maximum())   #initial setting = max
        self.settingVolumeSlider.valueChanged.connect(self.on_settingVolumeSliderChanged)

        self.weatherVolumeSlider = QtWidgets.QSlider(parent=self.interfaceFrame)
        self.weatherVolumeSlider.setGeometry(QtCore.QRect(430, y_positon_volumeSliders, 111, 20))
        self.weatherVolumeSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.weatherVolumeSlider.setStyleSheet(CSS_Slider)
        self.weatherVolumeSlider.setObjectName("weatherVolumeSlider")
        self.weatherVolumeSlider.setValue(self.weatherVolumeSlider.maximum())   #initial setting = max
        self.weatherVolumeSlider.valueChanged.connect(self.on_weatherVolumeSliderChanged)

        self.specialVolumeSlider = QtWidgets.QSlider(parent=self.interfaceFrame)
        self.specialVolumeSlider.setGeometry(QtCore.QRect(610, y_positon_volumeSliders, 111, 20))
        self.specialVolumeSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.specialVolumeSlider.setStyleSheet(CSS_Slider)
        self.specialVolumeSlider.setObjectName("specialVolumeSlider")
        self.specialVolumeSlider.setValue(self.specialVolumeSlider.maximum())   #initial setting = max
        self.specialVolumeSlider.valueChanged.connect(self.on_specialVolumeSliderChanged)

        # muffle Buttons require raw audio manipulation -> future version?
        '''self.musicMuffleButton = QtWidgets.QPushButton(parent=self.interfaceFrame)
        self.musicMuffleButton.setGeometry(QtCore.QRect(115, 415, 31, 24))
        self.musicMuffleButton.setStyleSheet(f"background-color: {dark_gray}")
        self.musicMuffleButton.setText("")
        self.musicMuffleButton.setObjectName("musicMuffleButton")

        self.settingMuffleButton = QtWidgets.QPushButton(parent=self.interfaceFrame)
        self.settingMuffleButton.setGeometry(QtCore.QRect(295, 415, 31, 24))
        self.settingMuffleButton.setStyleSheet(f"background-color: {dark_gray}")
        self.settingMuffleButton.setText("")
        self.settingMuffleButton.setObjectName("settingMuffleButton")

        self.weatherMuffleButton = QtWidgets.QPushButton(parent=self.interfaceFrame)
        self.weatherMuffleButton.setGeometry(QtCore.QRect(470, 415, 31, 24))
        self.weatherMuffleButton.setStyleSheet(f"background-color: {dark_gray}")
        self.weatherMuffleButton.setText("")
        self.weatherMuffleButton.setObjectName("weatherMuffleButton")

        self.specialMuffleButton = QtWidgets.QPushButton(parent=self.interfaceFrame)
        self.specialMuffleButton.setGeometry(QtCore.QRect(650, 415, 31, 24))
        self.specialMuffleButton.setStyleSheet(f"background-color: {dark_gray}")
        self.specialMuffleButton.setText("")
        self.specialMuffleButton.setObjectName("specialMuffleButton")

        self.muffle_label = QtWidgets.QLabel(parent=self.interfaceFrame)

        self.muffle_label.setGeometry(QtCore.QRect(48, 415, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.muffle_label.setFont(font)
        self.muffle_label.setTextFormat(QtCore.Qt.TextFormat.PlainText)
        self.muffle_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.muffle_label.setObjectName("muffle_label")
        self.muffle_label.setText(_translate("MainWindow", "Muffle:"))'''

        # menu and status bars
        MainWindow.setCentralWidget(self.centralwidget)
        menuBar = MainWindow.menuBar()
        toolBar = MainWindow.addToolBar("File")
        toolBar.setMovable(False)
        toolBar.setStyleSheet(CSS_toolbar)

        # preset dropdown
        self.presetCombobox = QtWidgets.QComboBox()
        self.presetCombobox.setMinimumWidth(200)
        self.presetCombobox.setStyleSheet(CSS_ComboBox)
        self.presetCombobox.currentIndexChanged.connect(self.on_presetComboBoxChanged)
        presetLabel = QtWidgets.QLabel("Preset: ")
        presetLabel.setStyleSheet(f"color: {white}")
    
        # file menu
        file_menu = menuBar.addMenu("&File")
        # new 
        icon = QtGui.QIcon.fromTheme("document-new")
        new_action = QtGui.QAction(icon, "&New...",MainWindow, triggered=self.new) 
        file_menu.addAction(new_action)
        # open 
        icon = QtGui.QIcon.fromTheme("document-open")
        open_action = QtGui.QAction(icon, "&Open...",MainWindow, triggered=self.open) 
        file_menu.addAction(open_action)
        # save
        icon = QtGui.QIcon.fromTheme("document-save")
        save_action = QtGui.QAction(icon, "&Save...",MainWindow, triggered=self.save) 
        save_action.setShortcut(QtGui.QKeySequence(QtGui.QKeySequence.StandardKey.Save))
        file_menu.addAction(save_action)
        # save as
        icon = QtGui.QIcon.fromTheme("document-save")
        save_as_action = QtGui.QAction(icon, "&Save as...",MainWindow, triggered=self.save_as) 
        file_menu.addAction(save_as_action)

        
        menuBar.setStyleSheet(CSS_menubar)
        MainWindow.setMenuBar(menuBar)
        toolBar.addWidget(menuBar)
        toolBar.addWidget(presetLabel)
        toolBar.addWidget(self.presetCombobox)
        
        
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setStyleSheet(f"background-color: {dark_gray}")
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # init functions
        self.listPresets()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # button action definitions

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Meistermaschine "))

        self.masterVolumeLabel.setText(_translate("MainWindow", "Master Volume"))
        
        # SD card control (SD_frame)
        self.getRootFolderButton.setText(_translate("MainWindow", "Change Folder"))
        self.saveToSDButton.setText(_translate("MainWindow", "Save to SD"))
        self.SDcardsLabel.setText(_translate("MainWindow", "SD cards"))
        self.refreshButton.setText(_translate("MainWindow", "Refresh"))
        
        

    #############################################################################################################################
    # event handlers
    # Slots
    @Slot()
    def new(self)->None:
        file = QtWidgets.QFileDialog.getSaveFileName(None, "Create new file", self.default_preset_path, "*.mms")
        self.clearAllPlaylists()
        self.saveFile_mms(file[0])
        self.listPresets()

    @Slot()
    def open(self)->None:
        file = QtWidgets.QFileDialog.getOpenFileName(None, "Select a file...", self.default_preset_path, "*.mms")
        self.loadFile_mms(file[0])

    @Slot()
    def save(self)->None:
        file = self.getCurrentPresetFile()
        self.saveFile_mms(file)

    @Slot()
    def save_as(self)->None:
        file = QtWidgets.QFileDialog.getSaveFileName(None, "Save file", self.default_preset_path, "*.mms")
        self.saveFile_mms(file[0])
        self.listPresets()

    # Preset Combobox
    def on_presetComboBoxChanged(self, idx)->None:
        if self.preset_lst:
            new_file = self.preset_lst[idx]
            self.loadFile_mms(new_file[0])

    # Buttons
    def on_fileTree_doubleClicked(self)->None:
        index = self.fileTreeListView.currentIndex()
        filePath = self.fileModel.filePath(index)
        if os.path.isdir(filePath):
            self.fileTreeListView.expand(index.parent())
        # play sound file when double clicked in fileTree (SD card frame)?
        # add auxilliary player?
        '''if os.path.isfile(filePath):
            self.stopAllPlayers()
            self.musicPlayer.setSource(filePath)
            self.musicPlayer.play()'''

    def on_rootFolderDialogBtnClicked(self)->None:
        path = QtWidgets.QFileDialog.getExistingDirectory(None, "Select Folder")
        if path:
           self.fileTreeListView.setRootIndex(self.fileModel.index(path)) 

    def on_soundBtnclicked(self, idx: int, btn_Type: str)->None:
        if btn_Type == 'music':
            soundBtn = self.musicBtn_lst[idx]
            soundPlayer = self.musicPlayer
            soundBtn_lst = self.musicBtn_lst
        elif btn_Type == 'setting':
            soundBtn = self.settingBtn_lst[idx]
            soundPlayer = self.settingPlayer
            soundBtn_lst = self.settingBtn_lst
        elif btn_Type == 'weather':
            soundBtn = self.weatherBtn_lst[idx]
            soundPlayer = self.weatherPlayer
            soundBtn_lst = self.weatherBtn_lst
        elif btn_Type == 'special':
            soundBtn = self.specialBtn_lst[idx]
            soundPlayer = self.specialPlayer
            soundBtn_lst = self.specialBtn_lst
        
        self.stopPlayers([soundPlayer])

        if soundBtn.isChecked():
            self.setActiveButton(idx, soundBtn_lst)
            self.uncheckInactiveButtons(soundBtn_lst)
            activeSong = soundBtn.getActiveSong()
            if activeSong:
                '''soundPlayer.setSource(activeSong[0])
                soundPlayer.play()'''
                self.playPlayer(soundPlayer, activeSong[0])
                if btn_Type == 'music': self.displayPlaylist(soundBtn)
            else:
                soundBtn.setChecked(False)
        else:
            if btn_Type == 'music': self.currentSoundFilesListWidget.clear()    # clear playlist
            soundBtn._isActive=False

    def on_stopBtnClicked(self)->None:
        self.stopPlayers([self.musicPlayer, self.settingPlayer, self.weatherPlayer, self.specialPlayer])
        self.uncheckAllButtons()
        self.currentSoundFilesListWidget.clear()    # clear playlist

    def on_trackBackwardClicked(self)->None:
        activeBtn = self.getActiveButton(self.musicBtn_lst)
        previousSong = activeBtn.getPreviousSong()
        self.stopPlayers([self.musicPlayer])
        self.musicPlayer.setSource(previousSong[0])
        self.musicPlayer.setPosition(0)
        self.musicPlayer.play()
        self.currentSoundFilesListWidget.item(activeBtn.activeSongKey).setSelected(True)
        #Todo: set activated item

    def on_trackForwardClicked(self)->None:
        activeBtn = self.getActiveButton(self.musicBtn_lst)
        nextSong = activeBtn.getNextSong()
        self.stopPlayers([self.musicPlayer])
        self.musicPlayer.setSource(nextSong[0])
        self.musicPlayer.setPosition(0)
        self.musicPlayer.play()
        self.currentSoundFilesListWidget.item(activeBtn.activeSongKey).setSelected(True)

    def on_playPauseBtnClicked(self)->None:
        status = self.musicPlayer.playbackState()
        if status == QtMultimedia.QMediaPlayer.PlaybackState.PlayingState:
            self.playPauseButton.setIcon(self.playIcon)
            self.musicPlayer.pause()
        if status == QtMultimedia.QMediaPlayer.PlaybackState.PausedState:
            self.musicPlayer.play()
            self.playPauseButton.setIcon(self.pauseIcon)
        elif status == QtMultimedia.QMediaPlayer.PlaybackState.StoppedState:
            activeBtn = self.getActiveButton(self.musicBtn_lst)
            if activeBtn:
                activeSong = activeBtn.getActiveSong()
                if activeSong:
                    self.musicPlayer.setSource(activeSong[0])
                    self.musicPlayer.play()
                    self.playPauseButton.setIcon(self.pauseIcon)

    def on_currentSoundFilesListWidget_clicked(self)->None:
        selection = self.currentSoundFilesListWidget.selectedItems()
        if not selection: return
        self.stopPlayers([self.musicPlayer])
        for item in selection:
            activeBtn = self.getActiveButton(self.musicBtn_lst)
            if not activeBtn: return
            else:
                itemIndex = self.currentSoundFilesListWidget.row(item)
                activeBtn.setActiveSong(itemIndex)
                activeSong = activeBtn.getActiveSong()
                if activeSong:
                    self.musicPlayer.setSource(activeSong[0])
                    self.musicPlayer.play()

    def on_currentSoundFilesListWidget_doubleClicked(self)->None:
        selection = self.currentSoundFilesListWidget.selectedItems()
        if not selection: return
        for item in selection:
            activeBtn = self.getActiveButton(self.musicBtn_lst)
            if not activeBtn: return
            else:
                itemIndex = self.currentSoundFilesListWidget.row(item)
                if itemIndex == activeBtn.activeSongKey:
                    player = self.getPlayerForButton(activeBtn)
                    self.stopPlayers([player])
                    activeBtn.removeSongFromPlaylist(itemIndex)
                    self.displayPlaylist(activeBtn)
                    if not activeBtn.activeSongKey==-1:
                        self.playPlayer(player, activeBtn.getActiveSong()[0])
                else:
                    activeBtn.removeSongFromPlaylist(itemIndex)
                    self.displayPlaylist(activeBtn)
                if activeBtn.activeSongKey==-1:
                    activeBtn.setChecked(False)
                    activeBtn._isActive=False

    def currentSoundFilesListWidget_itemMoved(self, old_index, new_index)->None:
        activeBtn = self.getActiveButton(self.musicBtn_lst)
        self.stopPlayers([self.musicPlayer])
        track = activeBtn.playlist.pop(old_index)
        activeBtn.playlist.insert(new_index, track)
        activeBtn.activeSongKey = new_index
        currentItem = self.currentSoundFilesListWidget.item(new_index)
        self.currentSoundFilesListWidget.setCurrentItem(currentItem)

    # music player
    def on_musicPlayerStatusChanged(self, status)->None:
        if status == QtMultimedia.QMediaPlayer.MediaStatus.EndOfMedia:
            activeMusicBtn = self.getActiveButton(self.musicBtn_lst)
            nextsong = activeMusicBtn.getNextSong()
            self.musicPlayer.setSource(nextsong[0])
            self.musicPlayer.setPosition(0)
            self.musicPlayer.play()
            #self.currentSoundFilesListWidget.item(activeMusicBtn.activeSongKey).setSelected(True)
            self.currentSoundFilesListWidget.setCurrentRow(activeMusicBtn.activeSongKey)

    def on_musicPlaybackStateChanged(self, state)->None:
        if state == QtMultimedia.QMediaPlayer.PlaybackState.StoppedState:
            self.statusbar.showMessage(f"Music Player: Stopped")
            self.playPauseButton.setIcon(self.playIcon)
        elif state == QtMultimedia.QMediaPlayer.PlaybackState.PausedState:
            self.statusbar.showMessage(f"Music Player: Paused")
            self.playPauseButton.setIcon(self.playIcon)
        elif state == QtMultimedia.QMediaPlayer.PlaybackState.PlayingState:
            self.statusbar.showMessage(f"Music Player: Playing")
            self.playPauseButton.setIcon(self.pauseIcon)

    # setting player   
    def on_settingPlayerStatusChanged(self, status)->None:
        if status == QtMultimedia.QMediaPlayer.MediaStatus.EndOfMedia:
            activeSettingBtn = self.getActiveButton(self.settingBtn_lst)
            nextsong = activeSettingBtn.getNextSong()
            self.settingPlayer.setSource(nextsong[0])
            self.settingPlayer.setPosition(0)
            self.settingPlayer.play()
    # weather player
    def on_weatherPlayerStatusChanged(self, status)->None:
        if status == QtMultimedia.QMediaPlayer.MediaStatus.EndOfMedia:
            activeSettingBtn = self.getActiveButton(self.weatherBtn_lst)
            nextsong = activeSettingBtn.getNextSong()
            self.weatherPlayer.setSource(nextsong[0])
            self.weatherPlayer.setPosition(0)
            self.weatherPlayer.play()
    # special player
    def on_specialPlayerStatusChanged(self, status)->None:
        if status == QtMultimedia.QMediaPlayer.MediaStatus.EndOfMedia:
            activeSettingBtn = self.getActiveButton(self.specialBtn_lst)
            activeSettingBtn.setChecked(False)
            activeSettingBtn._isActive = False
            self.specialPlayer.setPosition(0)   #rewind

    def on_musicPlayerDurationChanged(self, duration)->None:
        duration_sec = duration
        self.soundSlider.setMaximum(int(duration_sec))

    def on_musicPlayerPositionChanged(self, position)->None:
        position_sec = position
        self.soundSlider.setValue(int(position_sec))

    # soundSlider
    def on_soundSliderPressed(self)->None:
        self.musicPlayer.pause()

    def on_soundSliderReleased(self)->None:
        position = self.soundSlider.sliderPosition()
        self.musicPlayer.pause()
        self.musicPlayer.setPosition(position)
        self.musicPlayer.play()

    # master volume slider
    def on_masterVolumeSliderChanged(self, masterValue)->None:
        # convert linear scale to logarithmic to match dB perception
        musicValue = self.musicVolumeSlider.value()
        linMusicVolume = self.calculateDependentVolume(masterValue, musicValue)
        self._music_output.setVolume(linMusicVolume)

        settingValue = self.settingVolumeSlider.value()
        linSettingVolume = self.calculateDependentVolume(masterValue, settingValue)
        self._setting_output.setVolume(linSettingVolume)

        weatherValue = self.weatherVolumeSlider.value()
        linWeatherVolume = self.calculateDependentVolume(masterValue, weatherValue)
        self._weather_output.setVolume(linWeatherVolume)

        specialValue = self.specialVolumeSlider.value()
        linSpecialVolume = self.calculateDependentVolume(masterValue, specialValue)
        self._special_output.setVolume(linSpecialVolume)
        
    # individual volume sliders (dependent sliders)
    def on_musicVolumeSliderChanged(self, subValue)->None:
        masterValue = self.masterVolumeSlider.value()
        linDepVal = self.calculateDependentVolume(masterValue, subValue)
        self._music_output.setVolume(linDepVal)
        
    def on_settingVolumeSliderChanged(self, subValue)->None:
        masterValue = self.masterVolumeSlider.value()
        linDepVal = self.calculateDependentVolume(masterValue, subValue)
        self._setting_output.setVolume(linDepVal)

    def on_weatherVolumeSliderChanged(self, subValue)->None:
        masterValue = self.masterVolumeSlider.value()
        linDepVal = self.calculateDependentVolume(masterValue, subValue)
        self._weather_output.setVolume(linDepVal)

    def on_specialVolumeSliderChanged(self, subValue)->None:
        masterValue = self.masterVolumeSlider.value()
        linDepVal = self.calculateDependentVolume(masterValue, subValue)
        self._special_output.setVolume(linDepVal)
        
        
        
        
       

    #############################################################################################################################
    # helper functions

    def stopPlayerOfButton(self, dropButton)->None:
        player = self.getPlayerForButton(dropButton)
        self.stopPlayers([player])
        
    def getPlayerForButton(self, dropButton)->QtMultimedia.QMediaPlayer:
        for btn in self.musicBtn_lst:
            if id(btn)==id(dropButton):
                return self.musicPlayer
        for btn in self.settingBtn_lst:
            if id(btn)==id(dropButton):
                return self.settingPlayer
        for btn in self.weatherBtn_lst:
            if id(btn)==id(dropButton):
                return self.weatherPlayer
        for btn in self.specialBtn_lst:
            if id(btn)==id(dropButton):
                return self.specialPlayer
        
        
    def playPlayer(self, player: QtMultimedia.QMediaPlayer, songFile: str, fromBeginning=True)->None:
        player.setSource(songFile)
        if fromBeginning: player.setPosition(0)
        player.play()
        
    def getCurrentPresetFile(self)->str:
        current_idx=self.presetCombobox.currentIndex()
        currentPreset = self.preset_lst[current_idx]
        return currentPreset[0]
 
    def listPresets(self)->None:
        self.preset_lst.clear()
        self.presetCombobox.clear()
        presets = gl.glob(f"{self.default_preset_path}\\*.mms")
        presets.sort(key=os.path.getmtime)
        presets.reverse()
        for file in presets:
            head_tail = os.path.split(file)
            filename = os.path.splitext(head_tail[1])
            self.preset_lst.append([file, filename[0]])
            self.presetCombobox.addItem(filename[0])

    def saveFile_mms(self, file: str):
        try:
            f = open(file, 'w', encoding="utf-8")
        except Exception as exc:
            print(f"Unexpected {exc=}, {type(exc)=}")
        else:
            with f:
                btn_idx=0
                for btn in self.musicBtn_lst:
                    for key in range(len(btn.playlist)):
                        strUrl = btn.playlist[key][0].toString()
                        f.write(f"{0} {btn_idx}\t{strUrl}\n")
                    btn_idx+=1
                btn_idx=0
                for btn in self.settingBtn_lst:
                    for key in range(len(btn.playlist)):
                        strUrl = btn.playlist[key][0].toString()
                        f.write(f"{1} {btn_idx}\t{strUrl}\n")
                    btn_idx+=1
                btn_idx=0
                for btn in self.weatherBtn_lst:
                    for key in range(len(btn.playlist)):
                        strUrl = btn.playlist[key][0].toString()
                        f.write(f"{2} {btn_idx}\t{strUrl}\n")
                    btn_idx+=1
                btn_idx=0
                for btn in self.specialBtn_lst:
                    for key in range(len(btn.playlist)):
                        strUrl = btn.playlist[key][0].toString()
                        f.write(f"{3} {btn_idx}\t{strUrl}\n")
                    btn_idx+=1
        
    def loadFile_mms(self, file: str):
        try:
            f = open(file, 'r',  encoding="utf-8")
        except FileNotFoundError:
            print('File not found') # ToDo: display error in status bar
        else:
            with f:
                data = f.readlines()
                self.clearAllPlaylists()
                for line in data:
                    splitLine = line.split("\t")
                    idLst = splitLine[0].split()
                    soundFile_url = QtCore.QUrl.fromStringList([splitLine[1].rstrip()])[0]
                    if int(idLst[0])==0:
                        self.musicBtn_lst[int(idLst[1])].addSongToPlaylist(soundFile_url) 
                    if int(idLst[0])==1:
                        self.settingBtn_lst[int(idLst[1])].addSongToPlaylist(soundFile_url)
                    if int(idLst[0])==2:
                        self.weatherBtn_lst[int(idLst[1])].addSongToPlaylist(soundFile_url)
                    if int(idLst[0])==3:
                        self.specialBtn_lst[int(idLst[1])].addSongToPlaylist(soundFile_url)

    def calculateDependentVolume(self, masterValue: float, subValue: float)-> float:
        depValue = subValue*masterValue / 100
        linDepVal = QtMultimedia.QAudio.convertVolume(depValue / 100, QtMultimedia.QAudio.VolumeScale.LogarithmicVolumeScale, QtMultimedia.QAudio.VolumeScale.LinearVolumeScale)
        return linDepVal

    def stopPlayers(self, soundPlayer_lst: list[QtMultimedia.QMediaPlayer])->None:
        for player in soundPlayer_lst:
            player.stop()
        timeout = t.time()+5    # timer set to 5 seconds
        while t.time()<timeout:    
            t.sleep(0.1)
            testVal = 0
            for player in soundPlayer_lst:
                playbackState = player.playbackState()
                if playbackState != QtMultimedia.QMediaPlayer.PlaybackState.StoppedState:
                    testVal+=1
            if testVal == 0:
                break

    def uncheckAllButtons(self)->None:
        for btn in self.musicBtn_lst:
            btn.setChecked(False)
            btn._isActive=False
        for btn in self.settingBtn_lst:
            btn.setChecked(False)
            btn._isActive=False
        for btn in self.weatherBtn_lst:
            btn.setChecked(False)
            btn._isActive=False
        for btn in self.specialBtn_lst:
            btn.setChecked(False)
            btn._isActive=False

    def clearAllPlaylists(self)->None:
        for btn in self.musicBtn_lst:
            btn.playlist.clear()
            btn.activeSongKey=-1
        for btn in self.settingBtn_lst:
            btn.playlist.clear()
            btn.activeSongKey=-1
        for btn in self.weatherBtn_lst:
            btn.playlist.clear()
            btn.activeSongKey=-1
        for btn in self.specialBtn_lst:
            btn.playlist.clear()
            btn.activeSongKey=-1

    def uncheckInactiveButtons(self, btn_list: list[object])->None:
        for btn in btn_list:
            if not btn._isActive:
                btn.setChecked(False)

    def setActiveButton(self, btn_idx, btn_list)->None:
        for btn in btn_list:
            btn._isActive = False
        btn_list[btn_idx]._isActive = True
    
    def getActiveButton(self, btn_list)->object | None:
        for btn in btn_list:
            if btn._isActive == True: 
                return btn
        return None
            
    def getFilenameFromPath(self, path: str)->str:
        head_tail = os.path.split(path)
        file = os.path.splitext(head_tail[1])
        return file[0]


    def displayPlaylist(self, btn)->None:
        if not btn: return
        self.currentSoundFilesListWidget.clear()
        for sound_key in range(len(btn.playlist)):
            self.currentSoundFilesListWidget.addItem(btn.playlist[sound_key][1])
        #self.currentSoundFilesListWidget.item(btn.activeSongKey).setSelected(True)
        self.currentSoundFilesListWidget.setCurrentRow(btn.activeSongKey)
    
    class RearrangeListWidget(QtWidgets.QListWidget):
        '''
        class that implements the itemMoved signal so that the according Button playlist can be rearranged
        class enables internal drag and drop actions and scrolls automatically on drag move events up or down

        itemMoved signal is emitted with old_row and new_row which correspond to the old and new position of the moved item
        '''
        itemMoved = QtCore.pyqtSignal(int, int)

        def __init__(self, parent=None):
            super().__init__(parent)
            self.setAcceptDrops(True)
            self.setDragEnabled(True)
            self.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.SingleSelection)
            self.scroll_timer = QtCore.QTimer(self)
            self.scroll_timer.timeout.connect(self.scroll_while_dragging)
            self.scroll_speed = 20
            self.old_row = None

        def dragEnterEvent(self, event):
            if event.mimeData().hasFormat('application/x-qabstractitemmodeldatalist'):
                event.accept()
            else:
                event.ignore()

        def dragMoveEvent(self, event):
            if event.mimeData().hasFormat('application/x-qabstractitemmodeldatalist'):
                
                self.updateListDuringDrag(event)
                #event.setDropAction(QtCore.Qt.DropAction.MoveAction)
                event.accept()
                # Start autoscrolling timer if not already started
                if not self.scroll_timer.isActive():
                    self.scroll_timer.start(20)
            else:
                event.ignore()

        def dropEvent(self, event):
            if event.mimeData().hasFormat('application/x-qabstractitemmodeldatalist'):
                new_row = self.indexAt(event.position().toPoint()).row()
                if new_row != -1:
                    old_row = self.old_row
                    if old_row != new_row:
                        item = self.takeItem(old_row)
                        self.insertItem(new_row, item)
                        self.itemMoved.emit(old_row, new_row)
                        event.accept()  
            else:
                event.ignore()

        def updateListDuringDrag(self, event):
            row = self.indexAt(event.position().toPoint()).row()
            if row != -1:
                currentItem = self.item(self.old_row)
                currentItemRow = self.row(currentItem)

                if currentItemRow < row:
                    self.insertItem(row + 1, currentItem.text())
                    self.takeItem(currentItemRow)
                elif currentItemRow > row:
                    self.insertItem(row, currentItem.text())
                    self.takeItem(currentItemRow + 1)

        def mousePressEvent(self, event):
            self.old_row = self.indexAt(event.position().toPoint()).row()
            super().mousePressEvent(event)

        def scroll_while_dragging(self):
            pos = self.mapFromGlobal(QtGui.QCursor.pos())
            if pos.y() < 0:
                self.verticalScrollBar().setValue(self.verticalScrollBar().value() - self.scroll_speed)
            elif pos.y() > self.viewport().height():
                self.verticalScrollBar().setValue(self.verticalScrollBar().value() + self.scroll_speed)


    # method to create Button overriding QtPushButton to handle drop events and access outer methods (e.g. displayPlaylist())
    def create_acceptDropButton(self, parent, playlistMaxlength=40):
        outer_self = self
        
        # override for QPushButton to accept drag and drop events
        class AcceptDropButton(QtWidgets.QPushButton):
            def __init__(self, parent, playlistMaxlength):
                super(AcceptDropButton, self).__init__(parent)
                
                self.musicBtnContextMenu = QtWidgets.QMenu(self)
                clearPlaylistAction = self.musicBtnContextMenu.addAction("Clear Playlist")
                clearPlaylistAction.triggered.connect(self.clearPlaylist)

                self.playlistMaxlength = playlistMaxlength
                self.setAcceptDrops(True)
                self.playlist = []
                self._isActive = False
                self.activeSongKey = -1

            def contextMenuEvent(self, event: QtGui.QContextMenuEvent | None) -> None:
                #outer_self.displayPlaylist(self)
                self.musicBtnContextMenu.exec(event.globalPos())

            def clearPlaylist(self)->None:
                self.playlist.clear()
                outer_self.currentSoundFilesListWidget.clear()
                self.activeSongKey = -1
                if self._isActive:  # if playing then inactivate
                    outer_self.stopPlayerOfButton(self)
                    self.setChecked(False)
                    self._isActive = False

            def getActiveSong(self)->list | None:
                if not len(self.playlist):
                    return None
                elif self.activeSongKey == -1:
                    self.setActiveSong(0)
                    return self.playlist[0]
                elif self.activeSongKey < len(self.playlist):
                    return self.playlist[self.activeSongKey]

            def setActiveSong(self, key)->None:
                self.activeSongKey = key

            def getPreviousSong(self)->str:
                if self.activeSongKey-1 < 0:
                    self.activeSongKey = len(self.playlist)-1 #switch to last entry
                else:
                    self.activeSongKey -= 1
                return self.getActiveSong()

            def getActiveSongTitle(self)->str | None:
                activeSong = self.getActiveSong()
                if not activeSong:
                    return None
                else:
                    return activeSong[1]
                
            def getNextSong(self)->list:
                if self.activeSongKey+1 >= len(self.playlist) & len(self.playlist)!=0:
                    self.activeSongKey = 0  #switch to first entry
                else:
                    self.activeSongKey += 1
                return self.getActiveSong()
                
            def addSongToPlaylist(self, soundFile_url)->None:
                # validdate if url with validator?
                file = soundFile_url.toLocalFile()
                filename = outer_self.getFilenameFromPath(file)
                if len(self.playlist) >= self.playlistMaxlength:
                    self.playlist[0]=[soundFile_url, filename]  # replace entry
                else:
                    self.playlist.append([soundFile_url, filename])

            def removeSongFromPlaylist(self, index)->list[str]:
                if len(self.playlist)-1 == 0:       #only one song in list
                    track=self.playlist.pop()
                    self.activeSongKey=-1           #no active song left
                elif index==len(self.playlist)-1:   #last song erased
                    track=self.playlist.pop()
                    self.activeSongKey=0            #jump to first
                else:
                    track=self.playlist.pop(index)
                    self.activeSongKey=index        #next song active
                return track

            def dragEnterEvent(self, event):
                if event.mimeData().hasUrls():
                    event.acceptProposedAction()
                    outer_self.displayPlaylist(self)
                else:
                    super(AcceptDropButton, self).dragEnterEvent(event)

            def dragMoveEvent(self, event):
                super(AcceptDropButton, self).dragMoveEvent(event)

            def dropEvent(self, event):
                if event.mimeData().hasUrls():
                    for url in event.mimeData().urls():
                        self.addSongToPlaylist(url)
                    event.acceptProposedAction()
                else:
                    super(AcceptDropButton,self).dropEvent(event)   

            def dragLeaveEvent(self, event) -> None:
                activeBtn = outer_self.getActiveButton(outer_self.musicBtn_lst)
                outer_self.displayPlaylist(activeBtn)
                return super().leaveEvent(event)
            
            def enterEvent(self, event: QtGui.QEnterEvent | None) -> None:
                if len(self.playlist):
                    #self.setToolTip(self.getActiveSongTitle())
                    outer_self.displayPlaylist(self)
                return super().enterEvent(event)
            
            def leaveEvent(self, event) -> None:
                activeBtn = outer_self.getActiveButton(outer_self.musicBtn_lst)
                if activeBtn:
                    outer_self.displayPlaylist(activeBtn)
                else:
                    outer_self.currentSoundFilesListWidget.clear()
                return super().leaveEvent(event)

        return AcceptDropButton(parent, playlistMaxlength) 
        
        