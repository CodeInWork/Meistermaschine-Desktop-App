# Form implementation generated from reading ui file 'GUI_qtDesign.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets, QtMultimedia, QtMultimediaWidgets
import sys
"""from PySide6.QtCore import QStandardPaths, Qt, Slot
from PySide6.QtGui import QAction, QIcon, QKeySequence
from PySide6.QtWidgets import (QApplication, QDialog, QFileDialog,
                               QMainWindow, QSlider, QStyle, QToolBar)
from PySide6.QtMultimedia import (QAudioOutput, QMediaFormat,
                                  QMediaPlayer)
from PySide6.QtMultimediaWidgets import QVideoWidget"""

import os

import MusicPlayer as mp

# app colors
green = "rgb(97, 195, 144)"
pale_green = "rgb(153, 255, 202)"
pale_blue = "rgb(53, 238, 255)"
blue = "rgb(3, 175, 255)"
yellow = "rgb(255, 205, 88)"
pale_pink = "rgb(255, 152, 231)"



black = "rgb(0,0,0)"
dark_gray = "rgb(80, 80, 80)"
gray = "rgb(149, 149, 149)"
white = "rgb(255,255,255)"


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        ########################################################################################################
        # variables and settings
        self.btn_rows = 5
        self.musicIcon_lst = ["smiley_star","smiley_grin","smiley_neutral","smiley_scary","smiley_death"]
        self.musicBtn_color = pale_green
        self.settingIcon_lst = ["pub","dorf","landschaft","hohle","kampf"]
        self.settingBtn_color = yellow
        self.weatherIcon_lst = ["nacht","welle","wind","sturm","schnee"]
        self.weatherBtn_color = pale_blue
        self.specialIcon_lst = ["icon_square","icon_plus","icon_triangle","icon_minus","icon_star"]
        self.specialBtn_color = [pale_pink, pale_blue, yellow, pale_green, pale_pink]
        
        self.default_soundFile_path = f"{os.getcwd()}\\sounds"

        # Create Player Objects for Button Columns
        self._audio_output = QtMultimedia.QAudioOutput()
        self.musicPlayer = QtMultimedia.QMediaPlayer()
        self.musicPlayer.setAudioOutput(self._audio_output)

        # Player signals
        self.musicPlayer.mediaStatusChanged.connect(self.on_musicPlayerStatusChanged)
        self.musicPlayer.positionChanged.connect(self.on_musicPlayerPositionChanged)
        self.musicPlayer.durationChanged.connect(self.on_musicPlayerDurationChanged)


        # slider style sheet
        CSS = f"""QSlider::handle:horizontal {{
            background: {blue};
            border: 1px solid #565a5e;
            width: 24px;
            height: 8px;
            border-radius: 4px;
        }}"""

        # List View Style sheet
        CSS2 = f"""QListWidget::item{{
            color: {white};
            background-color: transparent;
        }}
        QListWidget {{
            background-color: {dark_gray};
        }}
        QListWidget::item:selected {{
            background-color: {blue};
        }}
        """

        # List View Style sheet
        CSS3 = f"""QTreeView::item{{
            color: {white};
            background-color: transparent;
        }}
        QTreeView {{
            background-color: {dark_gray};
            show-decoration-selected: 1;
        }}
        QTreeView::QScrollBar:horizontal {{
            border: 2px solid {gray};
            background: {dark_gray};
        }}
        """

        # Progress Bar Style Sheet
        CSS4 = f"""QProgressBar {{
            border: 2px solid {gray};
            border-radius: 5px;
            background-color: {gray};
        }}
        QProgressBar::chunk {{
            background-color:{blue};
            width: 20px;
        }}"""

        # Push Button Style Sheets
        # music button
        CSS_PB_music = f"""QPushButton {{
            background-color: {self.musicBtn_color};
        }}
        QPushButton:checked{{
                    background-color: {dark_gray};
                    border: none; 
                }}
        """

        # main window 
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 600)
        MainWindow.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        
        
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        
        self.centralwidget.setObjectName("centralwidget")

        ########################################################################################################
        # Sound Control Frame

        self.Sound_frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.Sound_frame.setGeometry(QtCore.QRect(0, 449, 800, 151))
        self.Sound_frame.setStyleSheet(f"background-color: {black}")
        self.Sound_frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.Sound_frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.Sound_frame.setObjectName("Sound_frame")
        
        self.pauseButton = QtWidgets.QPushButton(parent=self.Sound_frame)
        self.pauseButton.setGeometry(QtCore.QRect(170, 30, 75, 51))
        self.pauseButton.setStyleSheet(f"background-color:{green}")
        self.pauseButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/icon_pause.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pauseButton.setIcon(icon)
        self.pauseButton.setIconSize(QtCore.QSize(50, 50))
        self.pauseButton.setObjectName("pauseButton")
        self.pauseButton.clicked.connect(lambda: self.on_pauseBtnClicked())
        
        self.stopButton = QtWidgets.QPushButton(parent=self.Sound_frame)
        self.stopButton.setGeometry(QtCore.QRect(290, 30, 75, 51))
        self.stopButton.setStyleSheet(f"background-color:{green}")
        self.stopButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/icon_stop.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.stopButton.setIcon(icon)
        self.stopButton.setIconSize(QtCore.QSize(50, 50))
        self.stopButton.setObjectName("stopButton")
        self.stopButton.clicked.connect(lambda: self.on_stopBtnClicked())

        self.playButton = QtWidgets.QPushButton(parent=self.Sound_frame)
        self.playButton.setGeometry(QtCore.QRect(50, 30, 75, 51))
        self.playButton.setStyleSheet(f"background-color:{green}")
        self.playButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/icon_play.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.playButton.setIcon(icon)
        self.playButton.setIconSize(QtCore.QSize(50, 50))
        self.playButton.setObjectName("playButton")
        self.playButton.clicked.connect(lambda: self.on_playBtnClicked())

        self.masterVolumeSlider = QtWidgets.QSlider(parent=self.Sound_frame)
        self.masterVolumeSlider.setGeometry(QtCore.QRect(390, 60, 160, 18))
        self.masterVolumeSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.masterVolumeSlider.setStyleSheet(CSS)
        self.masterVolumeSlider.setObjectName("masterVolumeSlider")
        self.masterVolumeSlider.setValue(int(self._audio_output.volume()))
        #self.masterVolumeSlider.setValue(self.masterVolumeSlider.maximum())   #initial setting = max
        self.masterVolumeSlider.valueChanged[int].connect(self._audio_output.setVolume)

        self.masterVolumeLabel = QtWidgets.QLabel(parent=self.Sound_frame)
        self.masterVolumeLabel.setGeometry(QtCore.QRect(420, 80, 91, 16))
        self.masterVolumeLabel.setStyleSheet(f"color: {white}")
        self.masterVolumeLabel.setTextFormat(QtCore.Qt.TextFormat.PlainText)
        self.masterVolumeLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.masterVolumeLabel.setObjectName("masterVolumeLabel")

        self.currentSoundFilesListWidget = QtWidgets.QListWidget(parent=self.Sound_frame)
        self.currentSoundFilesListWidget.setGeometry(QtCore.QRect(620, 20, 141, 71))
        self.currentSoundFilesListWidget.setDragEnabled(True)
        self.currentSoundFilesListWidget.viewport().setAcceptDrops(True)
        self.currentSoundFilesListWidget.setDragDropMode(QtWidgets.QAbstractItemView.DragDropMode.InternalMove)
        self.currentSoundFilesListWidget.setStyleSheet(CSS2)
        self.currentSoundFilesListWidget.setObjectName("currentSoundFilesListWidget")
        self.currentSoundFilesListWidget.doubleClicked.connect(self.on_currentSoundFilesListWidget_doubleClicked)

        self.soundProgressBar = QtWidgets.QProgressBar(parent=self.Sound_frame)
        self.soundProgressBar.setGeometry(QtCore.QRect(390, 27, 160, 16))
        self.soundProgressBar.setStyleSheet(CSS4)
        self.soundProgressBar.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.soundProgressBar.setProperty("value", 24)
        self.soundProgressBar.setObjectName("progressBar")

        ########################################################################################################
        # SD card frame

        self.SDframe = QtWidgets.QFrame(parent=self.centralwidget)
        self.SDframe.setGeometry(QtCore.QRect(800, 0, 200, 600))
        self.SDframe.setStyleSheet(f"background-color:{black}")
        self.SDframe.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.SDframe.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.SDframe.setObjectName("SDframe")

        self.fileModel = QtGui.QFileSystemModel()
        self.fileModel.setRootPath(self.default_soundFile_path)
        self.fileTreeListView = QtWidgets.QTreeView(parent=self.SDframe)
        self.fileTreeListView.setSelectionMode(self.fileTreeListView.selectionMode().ExtendedSelection)
        #self.fileTreeListView.setExpandsOnDoubleClick(True)
        self.fileTreeListView.setHeaderHidden(True)
        self.fileTreeListView.setDragEnabled(True)
        self.fileTreeListView.setGeometry(QtCore.QRect(10, 50, 180, 361))
        self.fileTreeListView.setStyleSheet(CSS3)
        self.fileTreeListView.setObjectName("fileTreeListView")
        self.fileTreeListView.setModel(self.fileModel)
        self.fileTreeListView.setRootIndex(self.fileModel.index(self.default_soundFile_path))
        self.fileTreeListView.setColumnHidden(1, True)  # hide file size
        self.fileTreeListView.setColumnHidden(2, True)  # hide file type
        self.fileTreeListView.setColumnHidden(3, True)  # hide file date
        self.fileTreeListView.setColumnWidth(0, 400)
        self.fileTreeListView.show()
        self.fileTreeListView.doubleClicked[QtCore.QModelIndex].connect(self.on_fileTree_doubleClicked)
        #self.fileTreeListView.doubleClicked.connect(lambda: self.on_fileTree_doubleClicked())
        

        self.getRootFolderButton = QtWidgets.QPushButton(parent=self.SDframe)
        self.getRootFolderButton.setGeometry(QtCore.QRect(10, 10, 111, 24))
        self.getRootFolderButton.setStyleSheet(f"background-color:{green}")
        self.getRootFolderButton.setObjectName("getRootFolderButton")
        self.getRootFolderButton.clicked.connect(lambda: self.on_rootFolderDialogBtnClicked())

        self.saveToSDButton = QtWidgets.QPushButton(parent=self.SDframe)
        self.saveToSDButton.setGeometry(QtCore.QRect(110, 500, 81, 24))
        self.saveToSDButton.setStyleSheet(f"background-color: {blue}")
        self.saveToSDButton.setObjectName("saveToSDButton")

        self.listOfFoundSDCardsCombobox = QtWidgets.QComboBox(parent=self.SDframe)
        self.listOfFoundSDCardsCombobox.setGeometry(QtCore.QRect(10, 470, 180, 22))
        self.listOfFoundSDCardsCombobox.setStyleSheet(f"background-color: {dark_gray}")
        self.listOfFoundSDCardsCombobox.setObjectName("listOfFoundSDCardsCombobox")

        self.SDcardsLabel = QtWidgets.QLabel(parent=self.SDframe)
        self.SDcardsLabel.setGeometry(QtCore.QRect(10, 450, 49, 16))
        self.SDcardsLabel.setStyleSheet(f"color: {white}")
        self.SDcardsLabel.setTextFormat(QtCore.Qt.TextFormat.PlainText)
        self.SDcardsLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.SDcardsLabel.setObjectName("SDcardsLabel")

        self.refreshButton = QtWidgets.QPushButton(parent=self.SDframe)
        self.refreshButton.setGeometry(QtCore.QRect(10, 500, 51, 24))
        self.refreshButton.setStyleSheet(f"background-color: {green}")
        self.refreshButton.setObjectName("refreshButton")

        #########################################################################################################
        # main interface frame (Audio Buttons)
        
        self.interfaceFrame = QtWidgets.QFrame(parent=self.centralwidget)
        self.interfaceFrame.setGeometry(QtCore.QRect(0, 0, 800, 450))
        self.interfaceFrame.setStyleSheet(f"background-color: {gray}")
        self.interfaceFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.interfaceFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.interfaceFrame.setObjectName("interfaceFrame")
        # grid for main sound Buttons
        self.layoutWidget = QtWidgets.QWidget(parent=self.interfaceFrame)
        self.layoutWidget.setGeometry(QtCore.QRect(0, 22, 800, 355))
        self.layoutWidget.setObjectName("layoutWidget")

        self.mainButtonGridLayout = QtWidgets.QGridLayout(self.layoutWidget)
        self.mainButtonGridLayout.setContentsMargins(0, 0, 0, 0)
        self.mainButtonGridLayout.setObjectName("mainButtonGridLayout")

        # Button configurations 
        font = QtGui.QFont()
        font.setPointSize(16)     
          
        # music Buttons
        self.musicBtn_lst = [self.create_acceptDropButton(parent=self.layoutWidget) for b in range(self.btn_rows)]
        for btn in self.musicBtn_lst:
            curBtnIndex = self.musicBtn_lst.index(btn)
            btn.setCheckable(True)
            btn.setMaximumSize(QtCore.QSize(75, 75))
            btn.setFont(font)
            btn.setStyleSheet(CSS_PB_music)
            btn.setText("")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap(f"icons/{self.musicIcon_lst[curBtnIndex]}.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            btn.setIcon(icon)
            btn.setIconSize(QtCore.QSize(50, 50))
            btn.setObjectName(f"musicBtn_{curBtnIndex+1}")
            btn.clicked.connect(lambda checked, idx = curBtnIndex: self.on_musicBtnclicked(idx))
            self.mainButtonGridLayout.addWidget(btn, curBtnIndex, 0, 1, 1)

        # setting Buttons
        self.settingBtn_lst = [QtWidgets.QPushButton(parent=self.layoutWidget) for b in range(self.btn_rows)]
        for btn in self.settingBtn_lst:
            btn.setMaximumSize(QtCore.QSize(75, 75))
            btn.setFont(font)
            btn.setStyleSheet(f"background-color:{self.settingBtn_color}")
            btn.setText("")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap(f"icons/{self.settingIcon_lst[self.settingBtn_lst.index(btn)]}.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            btn.setIcon(icon)
            btn.setIconSize(QtCore.QSize(50, 50))
            btn.setObjectName(f"settingBtn_{self.settingBtn_lst.index(btn)+1}")
            self.mainButtonGridLayout.addWidget(btn, self.settingBtn_lst.index(btn), 1, 1, 1)

        # weather Buttons
        self.weatherBtn_lst = [QtWidgets.QPushButton(parent=self.layoutWidget) for b in range(self.btn_rows)]
        for btn in self.weatherBtn_lst:
            btn.setMaximumSize(QtCore.QSize(75, 75))
            btn.setFont(font)
            btn.setStyleSheet(f"background-color:{self.weatherBtn_color}")
            btn.setText("")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap(f"icons/{self.weatherIcon_lst[self.weatherBtn_lst.index(btn)]}.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            btn.setIcon(icon)
            btn.setIconSize(QtCore.QSize(50, 50))
            btn.setObjectName(f"weatherBtn_{self.weatherBtn_lst.index(btn)+1}")
            self.mainButtonGridLayout.addWidget(btn, self.weatherBtn_lst.index(btn), 2, 1, 1)

        # special Buttons
        self.specialBtn_lst = [QtWidgets.QPushButton(parent=self.layoutWidget) for b in range(self.btn_rows)]
        for btn in self.specialBtn_lst:
            btn.setMaximumSize(QtCore.QSize(75, 75))
            btn.setFont(font)
            btn.setStyleSheet(f"background-color:{self.specialBtn_color[self.specialBtn_lst.index(btn)]}")
            #btn.setText(f"{self.specialBtn_lst.index(btn)+1}")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap(f"icons/{self.specialIcon_lst[self.specialBtn_lst.index(btn)]}.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            btn.setIcon(icon)
            btn.setIconSize(QtCore.QSize(50, 50))
            btn.setObjectName(f"specialBtn_{self.specialBtn_lst.index(btn)+1}")
            self.mainButtonGridLayout.addWidget(btn, self.specialBtn_lst.index(btn), 3, 1, 1)    

        # individual volume sliders
        self.musicVolumeSlider = QtWidgets.QSlider(parent=self.interfaceFrame)
        self.musicVolumeSlider.setGeometry(QtCore.QRect(79, 390, 111, 20))
        self.musicVolumeSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.musicVolumeSlider.setStyleSheet(CSS)
        self.musicVolumeSlider.setObjectName("musicVolumeSlider")
        self.musicVolumeSlider.setValue(self.musicVolumeSlider.maximum())   #initial setting = max

        self.settingVolumeSlider = QtWidgets.QSlider(parent=self.interfaceFrame)
        self.settingVolumeSlider.setGeometry(QtCore.QRect(260, 390, 111, 20))
        self.settingVolumeSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.settingVolumeSlider.setStyleSheet(CSS)
        self.settingVolumeSlider.setObjectName("settingVolumeSlider")
        self.settingVolumeSlider.setValue(self.settingVolumeSlider.maximum())   #initial setting = max

        self.weatherVolumeSlider = QtWidgets.QSlider(parent=self.interfaceFrame)
        self.weatherVolumeSlider.setGeometry(QtCore.QRect(430, 390, 111, 20))
        self.weatherVolumeSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.weatherVolumeSlider.setStyleSheet(CSS)
        self.weatherVolumeSlider.setObjectName("weatherVolumeSlider")
        self.weatherVolumeSlider.setValue(self.weatherVolumeSlider.maximum())   #initial setting = max

        self.specialVolumeSlider = QtWidgets.QSlider(parent=self.interfaceFrame)
        self.specialVolumeSlider.setGeometry(QtCore.QRect(610, 390, 111, 20))
        self.specialVolumeSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.specialVolumeSlider.setStyleSheet(CSS)
        self.specialVolumeSlider.setObjectName("specialVolumeSlider")
        self.specialVolumeSlider.setValue(self.specialVolumeSlider.maximum())   #initial setting = max

        self.musicMuffleButton = QtWidgets.QPushButton(parent=self.interfaceFrame)
        self.musicMuffleButton.setGeometry(QtCore.QRect(115, 415, 31, 24))
        self.musicMuffleButton.setStyleSheet(f"background-color: {dark_gray}")
        self.musicMuffleButton.setText("")
        self.musicMuffleButton.setObjectName("musicMuffleButton")

        self.settingMuffleButton = QtWidgets.QPushButton(parent=self.interfaceFrame)
        self.settingMuffleButton.setGeometry(QtCore.QRect(295, 415, 31, 24))
        self.settingMuffleButton.setStyleSheet(f"background-color: {dark_gray}")
        self.settingMuffleButton.setText("")
        self.settingMuffleButton.setObjectName("settingMuffleButton")

        self.weatherMuffleButton = QtWidgets.QPushButton(parent=self.interfaceFrame)
        self.weatherMuffleButton.setGeometry(QtCore.QRect(470, 415, 31, 24))
        self.weatherMuffleButton.setStyleSheet(f"background-color: {dark_gray}")
        self.weatherMuffleButton.setText("")
        self.weatherMuffleButton.setObjectName("weatherMuffleButton")

        self.specialMuffleButton = QtWidgets.QPushButton(parent=self.interfaceFrame)
        self.specialMuffleButton.setGeometry(QtCore.QRect(650, 415, 31, 24))
        self.specialMuffleButton.setStyleSheet(f"background-color: {dark_gray}")
        self.specialMuffleButton.setText("")
        self.specialMuffleButton.setObjectName("specialMuffleButton")

        self.muffle_label = QtWidgets.QLabel(parent=self.interfaceFrame)

        self.muffle_label.setGeometry(QtCore.QRect(48, 415, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.muffle_label.setFont(font)
        self.muffle_label.setTextFormat(QtCore.Qt.TextFormat.PlainText)
        self.muffle_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.muffle_label.setObjectName("muffle_label")

        # menu and status bars
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1000, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setStyleSheet(f"background-color: {dark_gray}")
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        # Toolbar
        # ToDo

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # button action definitions

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Meistermaschine "))

        self.masterVolumeLabel.setText(_translate("MainWindow", "Master Volume"))
        
        # SD card control (SD_frame)
        self.getRootFolderButton.setText(_translate("MainWindow", "Change Folder"))
        self.saveToSDButton.setText(_translate("MainWindow", "Save to SD"))
        self.SDcardsLabel.setText(_translate("MainWindow", "SD cards"))
        self.refreshButton.setText(_translate("MainWindow", "Refresh"))
        
        self.muffle_label.setText(_translate("MainWindow", "Muffle:"))

    #############################################################################################################################
    # event handlers
        
    def on_fileTree_doubleClicked(self)->None:
        index = self.fileTreeListView.currentIndex()
        filePath = self.fileModel.filePath(index)
        if os.path.isdir(filePath):
            self.fileTreeListView.expand(index.parent())


    def on_rootFolderDialogBtnClicked(self)->None:
        path = QtWidgets.QFileDialog.getExistingDirectory(None, "Select Folder")
        if path:
           self.fileTreeListView.setRootIndex(self.fileModel.index(path)) 

    def on_musicBtnclicked(self, idx)->None:
        musicBtn = self.setActiveButton(idx, self.musicBtn_lst)
        self.uncheckInactiveButtons(self.musicBtn_lst)
        activeSong = musicBtn.getActiveSong()
        if activeSong:
            self.musicPlayer.setSource(activeSong[0])
            self.musicPlayer.play()
        
        self.displayPlaylist(musicBtn)    

    def on_stopBtnClicked(self)->None:
        self.musicPlayer.stop()

    def on_pauseBtnClicked(self)->None:
        self.musicPlayer.pause()

    def on_playBtnClicked(self)->None:
        status = self.musicPlayer.playbackState()
        if status == QtMultimedia.QMediaPlayer.PlaybackState.PausedState:
            self.musicPlayer.play()
        elif status == QtMultimedia.QMediaPlayer.PlaybackState.StoppedState:
            activeBtn = self.getActiveButton(self.musicBtn_lst)
            activeSong = activeBtn.getActiveSong()
            if activeSong:
                self.musicPlayer.setSource(activeSong[0])
                self.musicPlayer.play()

    def on_currentSoundFilesListWidget_doubleClicked(self)->None:
        selection = self.currentSoundFilesListWidget.selectedItems()
        if not selection: return
        for item in selection:
            self.currentSoundFilesListWidget.takeItem(self.currentSoundFilesListWidget.row(item))
            # ToDo: remove from active btn playlist

    def on_musicPlayerStatusChanged(self, status)->None:
        if status ==QtMultimedia.QMediaPlayer.MediaStatus.EndOfMedia:
            activeMusicBtn = self.getActiveButton(self.musicBtn_lst)
            nextsong = activeMusicBtn.getNextSong()
            self.musicPlayer.setSource(nextsong[0])
            self.musicPlayer.play()
      

    def on_musicPlayerDurationChanged(self, duration)->None:
        duration_sec = duration/1000
        self.soundProgressBar.setMaximum(int(duration_sec))
        self.soundProgressBar.reset()

    def on_musicPlayerPositionChanged(self, position)->None:
        position = self.musicPlayer.position()/1000
        self.soundProgressBar.setValue(int(position))

    #############################################################################################################################
    # helper functions
    def uncheckInactiveButtons(self, btn_list)->None:
        for btn in btn_list:
            if not btn._isActive:
                btn.setChecked(False)

    def setActiveButton(self, btn_idx, btn_list)->object:
        for btn in btn_list:
            btn._isActive = False
        btn_list[btn_idx]._isActive = True
        return btn_list[btn_idx]
    
    def getActiveButton(self, btn_list)->object:
        for btn in btn_list:
            if btn._isActive == True: 
                return btn
            
    def getFilenameFromPath(self, path: str)->str:
        head_tail = os.path.split(path)
        file = os.path.splitext(head_tail[1])
        return file[0]

    def sliderTest(self, value):
        self.currentSoundFilesListWidget.addItem(str(value))

    def displayPlaylist(self, btn)->None:
        if not btn: return
        self.currentSoundFilesListWidget.clear()
        for sound_key in btn.playlist:
            self.currentSoundFilesListWidget.addItem(btn.playlist[sound_key][1])

        self.currentSoundFilesListWidget.setCurrentRow(btn.activeSongKey)
        #if btn.activeSongIdx >= 0 & btn.activeSongIdx < self.currentSoundFilesListWidget.count():
            

    '''class DragDropListModel(QtGui.QAbstractListModel):
        def supportedDropActions(self):
            return QtCore.Qt.DropAction'''
    
    # method to create Button overriding QtPushButton to handle drop events and access outer methods (e.g. displayPlaylist())
    def create_acceptDropButton(self, parent):
        outer_self = self
        
        # override for QPushButton to accept drag and drop events
        class AcceptDropButton(QtWidgets.QPushButton):
            def __init__(self, parent):
                super(AcceptDropButton, self).__init__(parent)
                
                self.setAcceptDrops(True)
                self.playlist = {}
                self._isActive = False
                self.activeSongKey = -1

            def getActiveSong(self)->list | None:
                if not len(self.playlist):
                    return None
                elif self.activeSongKey == -1:
                    self.setActiveSong(0)
                    return self.playlist[0]
                elif self.activeSongKey < len(self.playlist):
                    return self.playlist[self.activeSongKey]

            def setActiveSong(self, key)->None:
                self.activeSongKey = key

            def getActiveSongTitle(self)->str | None:
                activeSong = self.getActiveSong()
                if not activeSong:
                    return None
                else:
                    return activeSong[1]
                
            def getNextSong(self)->list:
                if self.activeSongKey+1 >= len(self.playlist):
                    self.activeSongKey = 0
                else:
                    self.activeSongKey += 1
                return self.getActiveSong()
                
                
            def addSongToPlaylist(self, soundFile_url)->None:
                # validdate if url with validator?
                key = len(self.playlist)
                file = soundFile_url.toLocalFile()
                filename = outer_self.getFilenameFromPath(file)
                self.playlist[key] = [soundFile_url, filename]

            def dragEnterEvent(self, event):
                if event.mimeData().hasUrls():
                    event.acceptProposedAction()
                    outer_self.displayPlaylist(self)
                else:
                    super(AcceptDropButton, self).dragEnterEvent(event)

            def dragMoveEvent(self, event):
                super(AcceptDropButton, self).dragMoveEvent(event)

            def dropEvent(self, event):
                if event.mimeData().hasUrls():
                    for url in event.mimeData().urls():
                        #self.playlist.append(str(url.toLocalFile()))
                        self.addSongToPlaylist(url)
                    event.acceptProposedAction()
                    activeBtn = outer_self.getActiveButton(outer_self.musicBtn_lst)
                    outer_self.displayPlaylist(activeBtn)
                else:
                    super(AcceptDropButton,self).dropEvent(event)   

            def dragLeaveEvent(self, event) -> None:
                activeBtn = outer_self.getActiveButton(outer_self.musicBtn_lst)
                outer_self.displayPlaylist(activeBtn)
                return super().leaveEvent(event)
            
            def enterEvent(self, event: QtGui.QEnterEvent | None) -> None:
                if len(self.playlist):
                    self.setToolTip(self.getActiveSongTitle())
                return super().enterEvent(event)

        return AcceptDropButton(parent) 
        


class Playlist(dict):
    def __init__(self, parent):
        super(Playlist, self).__init__(parent)
        