# Form implementation generated from reading ui file 'GUI_qtDesign.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import os

# app colors
green = "rgb(97, 195, 144)"
pale_green = "rgb(153, 255, 202)"
pale_blue = "rgb(53, 238, 255)"
blue = "rgb(3, 175, 255)"
yellow = "rgb(255, 205, 88)"
pale_pink = "rgb(255, 152, 231)"



black = "rgb(0,0,0)"
dark_gray = "rgb(88, 88, 88)"
gray = "rgb(149, 149, 149)"
white = "rgb(255,255,255)"


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        ########################################################################################################
        # variables and settings
        self.btn_rows = 5
        self.musicIcon_lst = ["smiley_star","smiley_grin","smiley_neutral","smiley_scary","smiley_death"]
        self.musicBtn_color = pale_green
        self.settingIcon_lst = ["pub","dorf","landschaft","hohle","kampf"]
        self.settingBtn_color = yellow
        self.weatherIcon_lst = ["nacht","welle","wind","sturm","schnee"]
        self.weatherBtn_color = pale_blue
        self.specialIcon_lst = ["icon_square","icon_plus","icon_triangle","icon_minus","icon_star"]
        self.specialBtn_color = [pale_pink, pale_blue, yellow, pale_green, pale_pink]
        
        self.default_soundFile_path = f"{os.getcwd()}\\sounds"

        self.musicBtn_1_playlist = []
        self.musicBtn_2_playlist = []
        self.musicBtn_3_playlist = []
        self.musicBtn_4_playlist = []
        self.musicBtn_5_playlist = []

        self.settingBtn_1_playlist = []
        self.settingBtn_2_playlist = []
        self.settingBtn_3_playlist = []
        self.settingBtn_4_playlist = []
        self.settingBtn_5_playlist = []

        self.weatherBtn_1_playlist = []
        self.weatherBtn_2_playlist = []
        self.weatherBtn_3_playlist = []
        self.weatherBtn_4_playlist = []
        self.weatherBtn_5_playlist = []

        self.specialBtn_1_playlist = []
        self.specialBtn_2_playlist = []
        self.specialBtn_3_playlist = []
        self.specialBtn_4_playlist = []
        self.specialBtn_5_playlist = []

        # slider style sheet
        CSS = f"""QSlider::handle:horizontal {{
            background: {blue};
            border: 1px solid #565a5e;
            width: 24px;
            height: 8px;
            border-radius: 4px;
        }}"""


        # main window 
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 600)
        MainWindow.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        
        self.centralwidget.setObjectName("centralwidget")

        ########################################################################################################
        # Sound Control Frame

        self.Sound_frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.Sound_frame.setGeometry(QtCore.QRect(0, 449, 800, 151))
        self.Sound_frame.setStyleSheet(f"background-color: {black}")
        self.Sound_frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.Sound_frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.Sound_frame.setObjectName("Sound_frame")
        
        self.pauseButton = QtWidgets.QPushButton(parent=self.Sound_frame)
        self.pauseButton.setGeometry(QtCore.QRect(170, 30, 75, 51))
        self.pauseButton.setStyleSheet(f"background-color:{green}")
        self.pauseButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/icon_pause.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pauseButton.setIcon(icon)
        self.pauseButton.setIconSize(QtCore.QSize(50, 50))
        self.pauseButton.setObjectName("pauseButton")
        
        self.stopButton = QtWidgets.QPushButton(parent=self.Sound_frame)
        self.stopButton.setGeometry(QtCore.QRect(290, 30, 75, 51))
        self.stopButton.setStyleSheet(f"background-color:{green}")
        self.stopButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/icon_stop.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.stopButton.setIcon(icon)
        self.stopButton.setIconSize(QtCore.QSize(50, 50))
        self.stopButton.setObjectName("stopButton")

        self.playButton = QtWidgets.QPushButton(parent=self.Sound_frame)
        self.playButton.setGeometry(QtCore.QRect(50, 30, 75, 51))
        self.playButton.setStyleSheet(f"background-color:{green}")
        self.playButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/icon_play.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.playButton.setIcon(icon)
        self.playButton.setIconSize(QtCore.QSize(50, 50))
        self.playButton.setObjectName("playButton")

        self.masterVolumeSlider = QtWidgets.QSlider(parent=self.Sound_frame)
        self.masterVolumeSlider.setGeometry(QtCore.QRect(390, 60, 160, 18))
        self.masterVolumeSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.masterVolumeSlider.setStyleSheet(CSS)
        self.masterVolumeSlider.setObjectName("masterVolumeSlider")
        self.masterVolumeSlider.setValue(self.masterVolumeSlider.maximum())   #initial setting = max
        self.masterVolumeSlider.valueChanged[int].connect(self.sliderTest)

        self.masterVolumeLabel = QtWidgets.QLabel(parent=self.Sound_frame)
        self.masterVolumeLabel.setGeometry(QtCore.QRect(420, 80, 91, 16))
        self.masterVolumeLabel.setStyleSheet(f"color: {white}")
        self.masterVolumeLabel.setTextFormat(QtCore.Qt.TextFormat.PlainText)
        self.masterVolumeLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.masterVolumeLabel.setObjectName("masterVolumeLabel")

        self.currentSoundFilesListWidget = QtWidgets.QListWidget(parent=self.Sound_frame)
        self.currentSoundFilesListWidget.setGeometry(QtCore.QRect(620, 20, 141, 71))
        #self.currentSoundFilesListWidget.setStyleSheet(f"background-color:{dark_gray}")
        self.currentSoundFilesListWidget.setStyleSheet(CSS2)
        self.currentSoundFilesListWidget.setObjectName("currentSoundFilesListWidget")

        self.soundProgressBar = QtWidgets.QProgressBar(parent=self.Sound_frame)
        self.soundProgressBar.setGeometry(QtCore.QRect(390, 27, 160, 16))
        self.soundProgressBar.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.soundProgressBar.setProperty("value", 24)
        self.soundProgressBar.setObjectName("progressBar")

        ########################################################################################################
        # SD card frame

        self.SDframe = QtWidgets.QFrame(parent=self.centralwidget)
        self.SDframe.setGeometry(QtCore.QRect(800, 0, 200, 600))
        self.SDframe.setStyleSheet(f"background-color:{black}")
        self.SDframe.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.SDframe.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.SDframe.setObjectName("SDframe")

        self.fileModel = QtGui.QFileSystemModel()
        self.fileModel.setRootPath(self.default_soundFile_path)
        #self.fileTreeListView = QtWidgets.QListView(parent=self.SDframe)
        self.fileTreeListView = QtWidgets.QTreeView(parent=self.SDframe)
        self.fileTreeListView.setSelectionMode(self.fileTreeListView.selectionMode().ExtendedSelection)
        self.fileTreeListView.setHeaderHidden(True)
        self.fileTreeListView.setDragEnabled(True)
        self.fileTreeListView.setGeometry(QtCore.QRect(10, 50, 180, 361))
        self.fileTreeListView.setStyleSheet(f"background-color:{dark_gray}")
        self.fileTreeListView.setObjectName("fileTreeListView")
        self.fileTreeListView.setModel(self.fileModel)
        self.fileTreeListView.setRootIndex(self.fileModel.index(self.default_soundFile_path))
        self.fileTreeListView.show()
        self.fileTreeListView.doubleClicked[QtCore.QModelIndex].connect(self.on_fileTree_doubleClicked)
        

        self.getRootFolderButton = QtWidgets.QPushButton(parent=self.SDframe)
        self.getRootFolderButton.setGeometry(QtCore.QRect(10, 10, 111, 24))
        self.getRootFolderButton.setStyleSheet(f"background-color:{green}")
        self.getRootFolderButton.setObjectName("getRootFolderButton")
        self.getRootFolderButton.clicked.connect(lambda: self.getRootFolderDialog())

        self.saveToSDButton = QtWidgets.QPushButton(parent=self.SDframe)
        self.saveToSDButton.setGeometry(QtCore.QRect(110, 500, 81, 24))
        self.saveToSDButton.setStyleSheet(f"background-color: {blue}")
        self.saveToSDButton.setObjectName("saveToSDButton")

        self.listOfFoundSDCardsCombobox = QtWidgets.QComboBox(parent=self.SDframe)
        self.listOfFoundSDCardsCombobox.setGeometry(QtCore.QRect(10, 470, 180, 22))
        self.listOfFoundSDCardsCombobox.setStyleSheet(f"background-color: {dark_gray}")
        self.listOfFoundSDCardsCombobox.setObjectName("listOfFoundSDCardsCombobox")

        self.SDcardsLabel = QtWidgets.QLabel(parent=self.SDframe)
        self.SDcardsLabel.setGeometry(QtCore.QRect(10, 450, 49, 16))
        self.SDcardsLabel.setStyleSheet(f"color: {white}")
        self.SDcardsLabel.setTextFormat(QtCore.Qt.TextFormat.PlainText)
        self.SDcardsLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.SDcardsLabel.setObjectName("SDcardsLabel")

        self.refreshButton = QtWidgets.QPushButton(parent=self.SDframe)
        self.refreshButton.setGeometry(QtCore.QRect(10, 500, 51, 24))
        self.refreshButton.setStyleSheet(f"background-color: {green}")
        self.refreshButton.setObjectName("refreshButton")

        #########################################################################################################
        # main interface frame (Audio Buttons)
        
        self.interfaceFrame = QtWidgets.QFrame(parent=self.centralwidget)
        self.interfaceFrame.setGeometry(QtCore.QRect(0, 0, 800, 450))
        self.interfaceFrame.setStyleSheet(f"background-color: {gray}")
        self.interfaceFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.interfaceFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.interfaceFrame.setObjectName("interfaceFrame")
        # grid for main sound Buttons
        self.layoutWidget = QtWidgets.QWidget(parent=self.interfaceFrame)
        self.layoutWidget.setGeometry(QtCore.QRect(0, 22, 800, 355))
        self.layoutWidget.setObjectName("layoutWidget")

        self.mainButtonGridLayout = QtWidgets.QGridLayout(self.layoutWidget)
        self.mainButtonGridLayout.setContentsMargins(0, 0, 0, 0)
        self.mainButtonGridLayout.setObjectName("mainButtonGridLayout")

        # Button configurations 
        font = QtGui.QFont()
        font.setPointSize(16)     
          
        # music Buttons
        self.musicBtn_lst = [QtWidgets.QPushButton(parent=self.layoutWidget) for b in range(self.btn_rows)]
        for btn in self.musicBtn_lst:
            btn.setAcceptDrops(True)
            btn.setMaximumSize(QtCore.QSize(75, 75))
            btn.setFont(font)
            btn.setStyleSheet(f"background-color:{self.musicBtn_color}")
            btn.setText("")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap(f"icons/{self.musicIcon_lst[self.musicBtn_lst.index(btn)]}.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            btn.setIcon(icon)
            btn.setIconSize(QtCore.QSize(50, 50))
            btn.setObjectName(f"musicBtn_{self.musicBtn_lst.index(btn)+1}")
            self.mainButtonGridLayout.addWidget(btn, self.musicBtn_lst.index(btn), 0, 1, 1)

        # setting Buttons
        self.settingBtn_lst = [QtWidgets.QPushButton(parent=self.layoutWidget) for b in range(self.btn_rows)]
        for btn in self.settingBtn_lst:
            btn.setMaximumSize(QtCore.QSize(75, 75))
            btn.setFont(font)
            btn.setStyleSheet(f"background-color:{self.settingBtn_color}")
            btn.setText("")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap(f"icons/{self.settingIcon_lst[self.settingBtn_lst.index(btn)]}.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            btn.setIcon(icon)
            btn.setIconSize(QtCore.QSize(50, 50))
            btn.setObjectName(f"settingBtn_{self.settingBtn_lst.index(btn)+1}")
            self.mainButtonGridLayout.addWidget(btn, self.settingBtn_lst.index(btn), 1, 1, 1)

        # weather Buttons
        self.weatherBtn_lst = [QtWidgets.QPushButton(parent=self.layoutWidget) for b in range(self.btn_rows)]
        for btn in self.weatherBtn_lst:
            btn.setMaximumSize(QtCore.QSize(75, 75))
            btn.setFont(font)
            btn.setStyleSheet(f"background-color:{self.weatherBtn_color}")
            btn.setText("")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap(f"icons/{self.weatherIcon_lst[self.weatherBtn_lst.index(btn)]}.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            btn.setIcon(icon)
            btn.setIconSize(QtCore.QSize(50, 50))
            btn.setObjectName(f"weatherBtn_{self.weatherBtn_lst.index(btn)+1}")
            self.mainButtonGridLayout.addWidget(btn, self.weatherBtn_lst.index(btn), 2, 1, 1)

        # special Buttons
        self.specialBtn_lst = [QtWidgets.QPushButton(parent=self.layoutWidget) for b in range(self.btn_rows)]
        for btn in self.specialBtn_lst:
            btn.setMaximumSize(QtCore.QSize(75, 75))
            btn.setFont(font)
            btn.setStyleSheet(f"background-color:{self.specialBtn_color[self.specialBtn_lst.index(btn)]}")
            #btn.setText(f"{self.specialBtn_lst.index(btn)+1}")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap(f"icons/{self.specialIcon_lst[self.specialBtn_lst.index(btn)]}.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            btn.setIcon(icon)
            btn.setIconSize(QtCore.QSize(50, 50))
            btn.setObjectName(f"specialBtn_{self.specialBtn_lst.index(btn)+1}")
            self.mainButtonGridLayout.addWidget(btn, self.specialBtn_lst.index(btn), 3, 1, 1)    

        # individual volume sliders
        self.musicVolumeSlider = QtWidgets.QSlider(parent=self.interfaceFrame)
        self.musicVolumeSlider.setGeometry(QtCore.QRect(79, 390, 111, 20))
        self.musicVolumeSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.musicVolumeSlider.setStyleSheet(CSS)
        self.musicVolumeSlider.setObjectName("musicVolumeSlider")
        self.musicVolumeSlider.setValue(self.musicVolumeSlider.maximum())   #initial setting = max

        self.settingVolumeSlider = QtWidgets.QSlider(parent=self.interfaceFrame)
        self.settingVolumeSlider.setGeometry(QtCore.QRect(260, 390, 111, 20))
        self.settingVolumeSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.settingVolumeSlider.setStyleSheet(CSS)
        self.settingVolumeSlider.setObjectName("settingVolumeSlider")
        self.settingVolumeSlider.setValue(self.settingVolumeSlider.maximum())   #initial setting = max

        self.weatherVolumeSlider = QtWidgets.QSlider(parent=self.interfaceFrame)
        self.weatherVolumeSlider.setGeometry(QtCore.QRect(430, 390, 111, 20))
        self.weatherVolumeSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.weatherVolumeSlider.setStyleSheet(CSS)
        self.weatherVolumeSlider.setObjectName("weatherVolumeSlider")
        self.weatherVolumeSlider.setValue(self.weatherVolumeSlider.maximum())   #initial setting = max

        self.specialVolumeSlider = QtWidgets.QSlider(parent=self.interfaceFrame)
        self.specialVolumeSlider.setGeometry(QtCore.QRect(610, 390, 111, 20))
        self.specialVolumeSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.specialVolumeSlider.setStyleSheet(CSS)
        self.specialVolumeSlider.setObjectName("specialVolumeSlider")
        self.specialVolumeSlider.setValue(self.specialVolumeSlider.maximum())   #initial setting = max

        self.musicMuffleButton = QtWidgets.QPushButton(parent=self.interfaceFrame)
        self.musicMuffleButton.setGeometry(QtCore.QRect(115, 415, 31, 24))
        self.musicMuffleButton.setStyleSheet(f"background-color: {dark_gray}")
        self.musicMuffleButton.setText("")
        self.musicMuffleButton.setObjectName("musicMuffleButton")

        self.settingMuffleButton = QtWidgets.QPushButton(parent=self.interfaceFrame)
        self.settingMuffleButton.setGeometry(QtCore.QRect(295, 415, 31, 24))
        self.settingMuffleButton.setStyleSheet(f"background-color: {dark_gray}")
        self.settingMuffleButton.setText("")
        self.settingMuffleButton.setObjectName("settingMuffleButton")

        self.weatherMuffleButton = QtWidgets.QPushButton(parent=self.interfaceFrame)
        self.weatherMuffleButton.setGeometry(QtCore.QRect(470, 415, 31, 24))
        self.weatherMuffleButton.setStyleSheet(f"background-color: {dark_gray}")
        self.weatherMuffleButton.setText("")
        self.weatherMuffleButton.setObjectName("weatherMuffleButton")

        self.specialMuffleButton = QtWidgets.QPushButton(parent=self.interfaceFrame)
        self.specialMuffleButton.setGeometry(QtCore.QRect(650, 415, 31, 24))
        self.specialMuffleButton.setStyleSheet(f"background-color: {dark_gray}")
        self.specialMuffleButton.setText("")
        self.specialMuffleButton.setObjectName("specialMuffleButton")

        self.muffle_label = QtWidgets.QLabel(parent=self.interfaceFrame)

        self.muffle_label.setGeometry(QtCore.QRect(48, 415, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.muffle_label.setFont(font)
        self.muffle_label.setTextFormat(QtCore.Qt.TextFormat.PlainText)
        self.muffle_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.muffle_label.setObjectName("muffle_label")

        # menu and status bars
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1000, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setStyleSheet(f"background-color: {dark_gray}")
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # button action definitions

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Meistermaschine "))
        # audio control (sound_frame)
        #self.pauseButton.setText(_translate("MainWindow", "Pause"))
        #self.stopButton.setText(_translate("MainWindow", "Stop"))
        #self.playButton.setText(_translate("MainWindow", "Play"))
        self.masterVolumeLabel.setText(_translate("MainWindow", "Master Volume"))
        
        # SD card control (SD_frame)
        self.getRootFolderButton.setText(_translate("MainWindow", "Change Folder"))
        self.saveToSDButton.setText(_translate("MainWindow", "Save to SD"))
        self.SDcardsLabel.setText(_translate("MainWindow", "SD cards"))
        self.refreshButton.setText(_translate("MainWindow", "Refresh"))

        # main interface buttons (interface_fram)
        #self.musicBtn_3.setText(_translate("MainWindow", "3"))
        #self.musicBtn_4.setText(_translate("MainWindow", "4"))
        #self.musicBtn_5.setText(_translate("MainWindow", "5"))

        #self.settingBtn_1.setText(_translate("MainWindow", "6"))
        #self.musicBtn_7.setText(_translate("MainWindow", "7"))
        #self.musicBtn_8.setText(_translate("MainWindow", "8"))
        #self.musicBtn_9.setText(_translate("MainWindow", "9"))
        #self.musicBtn_10.setText(_translate("MainWindow", "10"))

        #self.musicBtn_11.setText(_translate("MainWindow", "11"))
        #self.musicBtn_12.setText(_translate("MainWindow", "12"))
        #self.musicBtn_13.setText(_translate("MainWindow", "13"))
        #self.musicBtn_14.setText(_translate("MainWindow", "14"))
        #self.musicBtn_15.setText(_translate("MainWindow", "15"))
        
        #self.musicBtn_16.setText(_translate("MainWindow", "16"))
        #self.musicBtn_17.setText(_translate("MainWindow", "17"))
        #self.musicBtn_18.setText(_translate("MainWindow", "18"))
        #self.musicBtn_19.setText(_translate("MainWindow", "19"))
        #self.musicBtn_20.setText(_translate("MainWindow", "20"))
        
        self.muffle_label.setText(_translate("MainWindow", "Muffle:"))

    #############################################################################################################################
    # event handlers
        
    def on_fileTree_doubleClicked(self, index)->None:
        filePath = self.fileModel.filePath(index)
        if os.path.isdir(filePath):
            #self.fileTreeListView.setRootIndex(self.fileModel.index(filePath))
            self.fileTreeListView.expand(index)
            #setRootIndex(self.fileModel.index(filePath))

    def getRootFolderDialog(self)->None:
        path = QtWidgets.QFileDialog.getExistingDirectory(None, "Select Folder")
        if path:
           self.fileTreeListView.setRootIndex(self.fileModel.index(path)) 

    def sliderTest(self, value):
        self.currentSoundFilesListWidget.addItem(str(value))

    class DragDropListModel(QtGui.QAbstractListModel):
        def supportedDropActions(self):
            return QtCore.Qt.DropAction
        
    class Button(QtGui.QPushButton):
        def __init__(self, parent):
            super(Button, self).__init__(parent)
            self.setAcceptDrops(True)
            #self.setDragDropMode(QAbstractItemView.InternalMove)

        def dragEnterEvent(self, event):
            if event.mimeData().hasUrls():
                event.acceptProposedAction()
            else:
                super(Button, self).dragEnterEvent(event)

        def dragMoveEvent(self, event):
            super(Button, self).dragMoveEvent(event)

        def dropEvent(self, event):
            if event.mimeData().hasUrls():
                for url in event.mimeData().urls():
                    print str(url.toLocalFile())
                event.acceptProposedAction()
            else:
                super(Button,self).dropEvent(event)
        
    

